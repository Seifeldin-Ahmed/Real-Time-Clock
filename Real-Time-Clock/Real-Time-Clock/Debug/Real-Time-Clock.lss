
Real-Time-Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000206e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  0000206e  00002102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  008000fc  008000fc  0000219e  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  000021a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000646  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000048e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002058  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094b  00000000  00000000  00006ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001060  00000000  00000000  0000742b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000660  00000000  00000000  0000848c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000caa  00000000  00000000  00008aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a14  00000000  00000000  00009796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__vector_4>
      14:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__vector_7>
      20:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_8>
      24:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__vector_9>
      28:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_10>
      2c:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
      8a:	0c 94 35 10 	jmp	0x206a	; 0x206a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CBF1>:
volatile u8 Global_u8Counter_Seconds=0;
volatile u8 Global_u8Counter_Minutes=0;
volatile u8 Global_u8Counter_Hours=0;
void CBF1 ()
{
   Global_u8Counter_Seconds++;
      92:	80 91 fe 00 	lds	r24, 0x00FE
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 fe 00 	sts	0x00FE, r24
 		  
 		  if(Global_u8Counter_Seconds >= 60)
      9c:	80 91 fe 00 	lds	r24, 0x00FE
      a0:	8c 33       	cpi	r24, 0x3C	; 60
      a2:	38 f0       	brcs	.+14     	; 0xb2 <CBF1+0x20>
 		  {
	 		  Global_u8Counter_Seconds=0;
      a4:	10 92 fe 00 	sts	0x00FE, r1
	 		  Global_u8Counter_Minutes ++;
      a8:	80 91 fd 00 	lds	r24, 0x00FD
      ac:	8f 5f       	subi	r24, 0xFF	; 255
      ae:	80 93 fd 00 	sts	0x00FD, r24
 		  }
 		  if(Global_u8Counter_Minutes >= 60)
      b2:	80 91 fd 00 	lds	r24, 0x00FD
      b6:	8c 33       	cpi	r24, 0x3C	; 60
      b8:	38 f0       	brcs	.+14     	; 0xc8 <CBF1+0x36>
 		  {
	 		  Global_u8Counter_Minutes=0;
      ba:	10 92 fd 00 	sts	0x00FD, r1
	 		  Global_u8Counter_Hours ++;
      be:	80 91 fc 00 	lds	r24, 0x00FC
      c2:	8f 5f       	subi	r24, 0xFF	; 255
      c4:	80 93 fc 00 	sts	0x00FC, r24
 		  }
 		  if(Global_u8Counter_Hours >= 24)
      c8:	80 91 fc 00 	lds	r24, 0x00FC
      cc:	88 31       	cpi	r24, 0x18	; 24
      ce:	10 f0       	brcs	.+4      	; 0xd4 <CBF1+0x42>
 		  {
	 		  Global_u8Counter_Hours=0;
      d0:	10 92 fc 00 	sts	0x00FC, r1
      d4:	08 95       	ret

000000d6 <main>:
 		  }
   	   
}
int main(void)
{    
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	29 97       	sbiw	r28, 0x09	; 9
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	f8 94       	cli
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8Value;
	u8 Loc_u8FirstDigit;
	u8 Loc_u8SecondDigit;
	 GPT_tstrOptions object;
	              object.Local_u8Prescaler=GPT_CHANNEL2_PRESCALER_128;
      ea:	85 e0       	ldi	r24, 0x05	; 5
      ec:	8c 83       	std	Y+4, r24	; 0x04
	              object.Local_u8Interrupt=GPT_TIMER2_OVERFLOW_INTERRUPT_ENABLE;
      ee:	80 e4       	ldi	r24, 0x40	; 64
      f0:	88 87       	std	Y+8, r24	; 0x08
	              object.Local_u8CompareOutputMode=GPT_OC2_NORMAL_PORT_CONNECTION;
      f2:	1e 82       	std	Y+6, r1	; 0x06
	              object.Local_u8Mode=GPT_u8_NORMAL;
      f4:	1d 82       	std	Y+5, r1	; 0x05
	             

				
	  PORT_vidInit();
      f6:	0e 94 9b 06 	call	0xd36	; 0xd36 <PORT_vidInit>
	  LCD_VidInit();
      fa:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_VidInit>
	  INT_vidEnableGlobalINT();
      fe:	0e 94 48 08 	call	0x1090	; 0x1090 <INT_vidEnableGlobalINT>
	  GPT_enuConfigure(GPT_u8_TIMER2,&object);
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	be 01       	movw	r22, r28
     106:	6c 5f       	subi	r22, 0xFC	; 252
     108:	7f 4f       	sbci	r23, 0xFF	; 255
     10a:	0e 94 4e 08 	call	0x109c	; 0x109c <GPT_enuConfigure>
	  GPT_enuRegisterCBF(GPT_u8_TIMER2,CBF1);
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	69 e4       	ldi	r22, 0x49	; 73
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <GPT_enuRegisterCBF>
      GPT_enuStartTimer(GPT_u8_TIMER2,1);
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	41 e0       	ldi	r20, 0x01	; 1
     11c:	50 e0       	ldi	r21, 0x00	; 0
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	0e 94 38 09 	call	0x1270	; 0x1270 <GPT_enuStartTimer>
     
     LCD_enuSendString("Press 1 to");
     126:	80 e6       	ldi	r24, 0x60	; 96
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
     LCD_enuGoTo(1,0);
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
     LCD_enuSendString("Set clock");
     136:	8b e6       	ldi	r24, 0x6B	; 107
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>

		    	}
				   else
				   {
					   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
					   LCD_enuSendString("Wrong Choice");
     13e:	0f 2e       	mov	r0, r31
     140:	f4 e9       	ldi	r31, 0x94	; 148
     142:	af 2e       	mov	r10, r31
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	bf 2e       	mov	r11, r31
     148:	f0 2d       	mov	r31, r0
					   _delay_ms(1000);
					   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
					   LCD_enuSendString("Press 1 to");
     14a:	0f 2e       	mov	r0, r31
     14c:	f0 e6       	ldi	r31, 0x60	; 96
     14e:	ef 2e       	mov	r14, r31
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	ff 2e       	mov	r15, r31
     154:	f0 2d       	mov	r31, r0
					   LCD_enuGoTo(1,0);
			   		   LCD_enuSendString("Set clock");
     156:	0f 2e       	mov	r0, r31
     158:	fb e6       	ldi	r31, 0x6B	; 107
     15a:	cf 2e       	mov	r12, r31
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	df 2e       	mov	r13, r31
     160:	f0 2d       	mov	r31, r0
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1);
			if(Loc_u8Value=='1') 
			{
		   //*********************************** Edit Hours ***************************************/
				LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
				LCD_enuSendString("Hours=--");
     162:	0f 2e       	mov	r0, r31
     164:	f5 e7       	ldi	r31, 0x75	; 117
     166:	8f 2e       	mov	r8, r31
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	9f 2e       	mov	r9, r31
     16c:	f0 2d       	mov	r31, r0
			     _delay_ms(250);
				 Global_u8Counter_Hours=(Loc_u8FirstDigit-48)*10 + (Loc_u8SecondDigit-48);
				 
			  //*********************************** Edit Minutes ***************************************/
			  LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
			  LCD_enuSendString("Minutes=--");
     16e:	0f 2e       	mov	r0, r31
     170:	fe e7       	ldi	r31, 0x7E	; 126
     172:	6f 2e       	mov	r6, r31
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	7f 2e       	mov	r7, r31
     178:	f0 2d       	mov	r31, r0
			     _delay_ms(250);
			  Global_u8Counter_Minutes=(Loc_u8FirstDigit-48)*10 + (Loc_u8SecondDigit-48);	 
				 
				  //*********************************** Edit Seconds ***************************************/
				  LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
				  LCD_enuSendString("Seconds=--");
     17a:	0f 2e       	mov	r0, r31
     17c:	f9 e8       	ldi	r31, 0x89	; 137
     17e:	4f 2e       	mov	r4, r31
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	5f 2e       	mov	r5, r31
     184:	f0 2d       	mov	r31, r0
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,1);
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,1);
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,1);
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,1); 
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1); 
		 SevSegment_enuDisplayNumber(DIO_u8_PORTB,Global_u8Counter_Seconds%10);
     186:	1a e0       	ldi	r17, 0x0A	; 10
     LCD_enuGoTo(1,0);
     LCD_enuSendString("Set clock");
     while(1)
     { 
		 
		 KEYPAD_enuGetPressedKey(&Loc_u8Value);
     188:	ce 01       	movw	r24, r28
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	0e 94 81 03 	call	0x702	; 0x702 <KEYPAD_enuGetPressedKey>
		 if(Loc_u8Value != KEYPAD_u8_NOTPRESSED)
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	84 36       	cpi	r24, 0x64	; 100
     194:	09 f4       	brne	.+2      	; 0x198 <main+0xc2>
     196:	22 c1       	rjmp	.+580    	; 0x3dc <main+0x306>
		 {
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,0);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,0);
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,0);
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	62 e0       	ldi	r22, 0x02	; 2
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,0);
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	63 e0       	ldi	r22, 0x03	; 3
     1ba:	40 e0       	ldi	r20, 0x00	; 0
     1bc:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,0);
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	64 e0       	ldi	r22, 0x04	; 4
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,0);
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	65 e0       	ldi	r22, 0x05	; 5
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  SevSegment_enuDisplayNumber(DIO_u8_PORTB,0);
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SevSegment_enuDisplayNumber>
			  
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,1);
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	41 e0       	ldi	r20, 0x01	; 1
     1e2:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,1);
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	41 e0       	ldi	r20, 0x01	; 1
     1ec:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,1);
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	62 e0       	ldi	r22, 0x02	; 2
     1f4:	41 e0       	ldi	r20, 0x01	; 1
     1f6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,1);
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	63 e0       	ldi	r22, 0x03	; 3
     1fe:	41 e0       	ldi	r20, 0x01	; 1
     200:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,1);
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	64 e0       	ldi	r22, 0x04	; 4
     208:	41 e0       	ldi	r20, 0x01	; 1
     20a:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1);
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	65 e0       	ldi	r22, 0x05	; 5
     212:	41 e0       	ldi	r20, 0x01	; 1
     214:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			if(Loc_u8Value=='1') 
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	81 33       	cpi	r24, 0x31	; 49
     21c:	09 f0       	breq	.+2      	; 0x220 <main+0x14a>
     21e:	c2 c0       	rjmp	.+388    	; 0x3a4 <main+0x2ce>
			{
		   //*********************************** Edit Hours ***************************************/
				LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
				LCD_enuSendString("Hours=--");
     226:	c4 01       	movw	r24, r8
     228:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
				LCD_enuGoTo(0,6);
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	66 e0       	ldi	r22, 0x06	; 6
     230:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	92 e5       	ldi	r25, 0x52	; 82
     238:	a7 e0       	ldi	r26, 0x07	; 7
     23a:	81 50       	subi	r24, 0x01	; 1
     23c:	90 40       	sbci	r25, 0x00	; 0
     23e:	a0 40       	sbci	r26, 0x00	; 0
     240:	e1 f7       	brne	.-8      	; 0x23a <main+0x164>
     242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x16e>
     244:	00 00       	nop
            	_delay_ms(300);
				do{
					KEYPAD_enuGetPressedKey(&Loc_u8FirstDigit); // First Digit
     246:	ce 01       	movw	r24, r28
     248:	02 96       	adiw	r24, 0x02	; 2
     24a:	0e 94 81 03 	call	0x702	; 0x702 <KEYPAD_enuGetPressedKey>
				}while(Loc_u8FirstDigit == KEYPAD_u8_NOTPRESSED);
     24e:	8a 81       	ldd	r24, Y+2	; 0x02
     250:	84 36       	cpi	r24, 0x64	; 100
     252:	c9 f3       	breq	.-14     	; 0x246 <main+0x170>
				LCD_enuSendCharacter(Loc_u8FirstDigit);
     254:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     258:	8f e7       	ldi	r24, 0x7F	; 127
     25a:	9a e1       	ldi	r25, 0x1A	; 26
     25c:	a6 e0       	ldi	r26, 0x06	; 6
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	90 40       	sbci	r25, 0x00	; 0
     262:	a0 40       	sbci	r26, 0x00	; 0
     264:	e1 f7       	brne	.-8      	; 0x25e <main+0x188>
     266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x192>
     268:	00 00       	nop
				_delay_ms(250);
			     do{
			 	     KEYPAD_enuGetPressedKey(&Loc_u8SecondDigit); // First Digit
     26a:	ce 01       	movw	r24, r28
     26c:	03 96       	adiw	r24, 0x03	; 3
     26e:	0e 94 81 03 	call	0x702	; 0x702 <KEYPAD_enuGetPressedKey>
				  }while(Loc_u8SecondDigit == KEYPAD_u8_NOTPRESSED);
     272:	8b 81       	ldd	r24, Y+3	; 0x03
     274:	84 36       	cpi	r24, 0x64	; 100
     276:	c9 f3       	breq	.-14     	; 0x26a <main+0x194>
				  LCD_enuSendCharacter(Loc_u8SecondDigit);
     278:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     27c:	8f e7       	ldi	r24, 0x7F	; 127
     27e:	9a e1       	ldi	r25, 0x1A	; 26
     280:	a6 e0       	ldi	r26, 0x06	; 6
     282:	81 50       	subi	r24, 0x01	; 1
     284:	90 40       	sbci	r25, 0x00	; 0
     286:	a0 40       	sbci	r26, 0x00	; 0
     288:	e1 f7       	brne	.-8      	; 0x282 <main+0x1ac>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x1b6>
     28c:	00 00       	nop
			     _delay_ms(250);
				 Global_u8Counter_Hours=(Loc_u8FirstDigit-48)*10 + (Loc_u8SecondDigit-48);
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	90 51       	subi	r25, 0x10	; 16
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	88 0f       	add	r24, r24
     296:	28 2f       	mov	r18, r24
     298:	22 0f       	add	r18, r18
     29a:	22 0f       	add	r18, r18
     29c:	82 0f       	add	r24, r18
     29e:	89 0f       	add	r24, r25
     2a0:	80 93 fc 00 	sts	0x00FC, r24
				 
			  //*********************************** Edit Minutes ***************************************/
			  LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
			  LCD_enuSendString("Minutes=--");
     2aa:	c3 01       	movw	r24, r6
     2ac:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
			  LCD_enuGoTo(0,8);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	68 e0       	ldi	r22, 0x08	; 8
     2b4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
			  do{
				  KEYPAD_enuGetPressedKey(&Loc_u8FirstDigit); // First Digit
     2b8:	ce 01       	movw	r24, r28
     2ba:	02 96       	adiw	r24, 0x02	; 2
     2bc:	0e 94 81 03 	call	0x702	; 0x702 <KEYPAD_enuGetPressedKey>
			  }while(Loc_u8FirstDigit == KEYPAD_u8_NOTPRESSED);
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	84 36       	cpi	r24, 0x64	; 100
     2c4:	c9 f3       	breq	.-14     	; 0x2b8 <main+0x1e2>
			  LCD_enuSendCharacter(Loc_u8FirstDigit);
     2c6:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     2ca:	8f e7       	ldi	r24, 0x7F	; 127
     2cc:	9a e1       	ldi	r25, 0x1A	; 26
     2ce:	a6 e0       	ldi	r26, 0x06	; 6
     2d0:	81 50       	subi	r24, 0x01	; 1
     2d2:	90 40       	sbci	r25, 0x00	; 0
     2d4:	a0 40       	sbci	r26, 0x00	; 0
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x1fa>
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x204>
     2da:	00 00       	nop
			    _delay_ms(250);
			  do{
				  KEYPAD_enuGetPressedKey(&Loc_u8SecondDigit); // First Digit
     2dc:	ce 01       	movw	r24, r28
     2de:	03 96       	adiw	r24, 0x03	; 3
     2e0:	0e 94 81 03 	call	0x702	; 0x702 <KEYPAD_enuGetPressedKey>
			  }while(Loc_u8SecondDigit == KEYPAD_u8_NOTPRESSED);
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	84 36       	cpi	r24, 0x64	; 100
     2e8:	c9 f3       	breq	.-14     	; 0x2dc <main+0x206>
			   LCD_enuSendCharacter(Loc_u8SecondDigit);
     2ea:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     2ee:	8f e7       	ldi	r24, 0x7F	; 127
     2f0:	9a e1       	ldi	r25, 0x1A	; 26
     2f2:	a6 e0       	ldi	r26, 0x06	; 6
     2f4:	81 50       	subi	r24, 0x01	; 1
     2f6:	90 40       	sbci	r25, 0x00	; 0
     2f8:	a0 40       	sbci	r26, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x21e>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x228>
     2fe:	00 00       	nop
			     _delay_ms(250);
			  Global_u8Counter_Minutes=(Loc_u8FirstDigit-48)*10 + (Loc_u8SecondDigit-48);	 
     300:	9b 81       	ldd	r25, Y+3	; 0x03
     302:	90 51       	subi	r25, 0x10	; 16
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	88 0f       	add	r24, r24
     308:	28 2f       	mov	r18, r24
     30a:	22 0f       	add	r18, r18
     30c:	22 0f       	add	r18, r18
     30e:	82 0f       	add	r24, r18
     310:	89 0f       	add	r24, r25
     312:	80 93 fd 00 	sts	0x00FD, r24
				 
				  //*********************************** Edit Seconds ***************************************/
				  LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
				  LCD_enuSendString("Seconds=--");
     31c:	c2 01       	movw	r24, r4
     31e:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
				  LCD_enuGoTo(0,8);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	68 e0       	ldi	r22, 0x08	; 8
     326:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
				  do{
					  KEYPAD_enuGetPressedKey(&Loc_u8FirstDigit); // First Digit
     32a:	ce 01       	movw	r24, r28
     32c:	02 96       	adiw	r24, 0x02	; 2
     32e:	0e 94 81 03 	call	0x702	; 0x702 <KEYPAD_enuGetPressedKey>
				  }while(Loc_u8FirstDigit == KEYPAD_u8_NOTPRESSED);
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	84 36       	cpi	r24, 0x64	; 100
     336:	c9 f3       	breq	.-14     	; 0x32a <main+0x254>
				  LCD_enuSendCharacter(Loc_u8FirstDigit);
     338:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     33c:	8f e7       	ldi	r24, 0x7F	; 127
     33e:	9a e1       	ldi	r25, 0x1A	; 26
     340:	a6 e0       	ldi	r26, 0x06	; 6
     342:	81 50       	subi	r24, 0x01	; 1
     344:	90 40       	sbci	r25, 0x00	; 0
     346:	a0 40       	sbci	r26, 0x00	; 0
     348:	e1 f7       	brne	.-8      	; 0x342 <main+0x26c>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x276>
     34c:	00 00       	nop
				    _delay_ms(250);
				  do{
					  KEYPAD_enuGetPressedKey(&Loc_u8SecondDigit); // First Digit
     34e:	ce 01       	movw	r24, r28
     350:	03 96       	adiw	r24, 0x03	; 3
     352:	0e 94 81 03 	call	0x702	; 0x702 <KEYPAD_enuGetPressedKey>
				  }while(Loc_u8SecondDigit == KEYPAD_u8_NOTPRESSED);
     356:	8b 81       	ldd	r24, Y+3	; 0x03
     358:	84 36       	cpi	r24, 0x64	; 100
     35a:	c9 f3       	breq	.-14     	; 0x34e <main+0x278>
				  LCD_enuSendCharacter(Loc_u8SecondDigit);
     35c:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     360:	8f e7       	ldi	r24, 0x7F	; 127
     362:	9a e1       	ldi	r25, 0x1A	; 26
     364:	a6 e0       	ldi	r26, 0x06	; 6
     366:	81 50       	subi	r24, 0x01	; 1
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	a0 40       	sbci	r26, 0x00	; 0
     36c:	e1 f7       	brne	.-8      	; 0x366 <main+0x290>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <main+0x29a>
     370:	00 00       	nop
				   _delay_ms(250);
				  Global_u8Counter_Seconds=(Loc_u8FirstDigit-48)*10 + (Loc_u8SecondDigit-48); 
     372:	9b 81       	ldd	r25, Y+3	; 0x03
     374:	90 51       	subi	r25, 0x10	; 16
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	88 0f       	add	r24, r24
     37a:	28 2f       	mov	r18, r24
     37c:	22 0f       	add	r18, r18
     37e:	22 0f       	add	r18, r18
     380:	82 0f       	add	r24, r18
     382:	89 0f       	add	r24, r25
     384:	80 93 fe 00 	sts	0x00FE, r24
				  
				 //*********************************** Back to default ***************************************//
				   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
				   LCD_enuSendString("Press 1 to");
     38e:	c7 01       	movw	r24, r14
     390:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
				   LCD_enuGoTo(1,0);
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
				   LCD_enuSendString("Set clock");
     39c:	c6 01       	movw	r24, r12
     39e:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
     3a2:	1c c0       	rjmp	.+56     	; 0x3dc <main+0x306>

		    	}
				   else
				   {
					   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
					   LCD_enuSendString("Wrong Choice");
     3aa:	c5 01       	movw	r24, r10
     3ac:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	99 e6       	ldi	r25, 0x69	; 105
     3b4:	a8 e1       	ldi	r26, 0x18	; 24
     3b6:	81 50       	subi	r24, 0x01	; 1
     3b8:	90 40       	sbci	r25, 0x00	; 0
     3ba:	a0 40       	sbci	r26, 0x00	; 0
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x2e0>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x2ea>
     3c0:	00 00       	nop
					   _delay_ms(1000);
					   LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
					   LCD_enuSendString("Press 1 to");
     3c8:	c7 01       	movw	r24, r14
     3ca:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
					   LCD_enuGoTo(1,0);
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
			   		   LCD_enuSendString("Set clock");
     3d6:	c6 01       	movw	r24, r12
     3d8:	0e 94 4a 05 	call	0xa94	; 0xa94 <LCD_enuSendString>
					  }
		 }
 //***************************************** Display Seconds *******************************************/		 
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,0);
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,1);
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,1);
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	62 e0       	ldi	r22, 0x02	; 2
     3f4:	41 e0       	ldi	r20, 0x01	; 1
     3f6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,1);
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	63 e0       	ldi	r22, 0x03	; 3
     3fe:	41 e0       	ldi	r20, 0x01	; 1
     400:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,1); 
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	64 e0       	ldi	r22, 0x04	; 4
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1); 
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	65 e0       	ldi	r22, 0x05	; 5
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 SevSegment_enuDisplayNumber(DIO_u8_PORTB,Global_u8Counter_Seconds%10);
     418:	80 91 fe 00 	lds	r24, 0x00FE
     41c:	61 2f       	mov	r22, r17
     41e:	0e 94 07 10 	call	0x200e	; 0x200e <__udivmodqi4>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	69 2f       	mov	r22, r25
     426:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SevSegment_enuDisplayNumber>
     42a:	af e6       	ldi	r26, 0x6F	; 111
     42c:	b7 e1       	ldi	r27, 0x17	; 23
     42e:	11 97       	sbiw	r26, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <main+0x358>
     432:	00 c0       	rjmp	.+0      	; 0x434 <main+0x35e>
     434:	00 00       	nop
		 _delay_ms(3);
		 
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,1);
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,0);
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,1);
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,1);
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	63 e0       	ldi	r22, 0x03	; 3
     458:	41 e0       	ldi	r20, 0x01	; 1
     45a:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,1);
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	64 e0       	ldi	r22, 0x04	; 4
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1);
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	65 e0       	ldi	r22, 0x05	; 5
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 SevSegment_enuDisplayNumber(DIO_u8_PORTB,Global_u8Counter_Seconds/10);
     472:	80 91 fe 00 	lds	r24, 0x00FE
     476:	61 2f       	mov	r22, r17
     478:	0e 94 07 10 	call	0x200e	; 0x200e <__udivmodqi4>
     47c:	68 2f       	mov	r22, r24
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SevSegment_enuDisplayNumber>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	97 e1       	ldi	r25, 0x17	; 23
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <main+0x3b2>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <main+0x3b8>
     48e:	00 00       	nop
		  _delay_ms(3); 
//********************************************** Display Minutes ********************************************/		 
		 
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,1);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,1);
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,0);
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	62 e0       	ldi	r22, 0x02	; 2
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,1);
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	63 e0       	ldi	r22, 0x03	; 3
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,1);
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	64 e0       	ldi	r22, 0x04	; 4
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	65 e0       	ldi	r22, 0x05	; 5
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 SevSegment_enuDisplayNumber(DIO_u8_PORTB,Global_u8Counter_Minutes%10);
     4cc:	80 91 fd 00 	lds	r24, 0x00FD
     4d0:	61 2f       	mov	r22, r17
     4d2:	0e 94 07 10 	call	0x200e	; 0x200e <__udivmodqi4>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	69 2f       	mov	r22, r25
     4da:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SevSegment_enuDisplayNumber>
     4de:	af e6       	ldi	r26, 0x6F	; 111
     4e0:	b7 e1       	ldi	r27, 0x17	; 23
     4e2:	11 97       	sbiw	r26, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <main+0x40c>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0x412>
     4e8:	00 00       	nop
		  _delay_ms(3);
		 
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,1);
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	41 e0       	ldi	r20, 0x01	; 1
     4f0:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,1);
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	41 e0       	ldi	r20, 0x01	; 1
     4fa:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,1);
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	62 e0       	ldi	r22, 0x02	; 2
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,0);
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	63 e0       	ldi	r22, 0x03	; 3
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,1);
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	64 e0       	ldi	r22, 0x04	; 4
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1);
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	65 e0       	ldi	r22, 0x05	; 5
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 SevSegment_enuDisplayNumber(DIO_u8_PORTB,Global_u8Counter_Minutes/10);
     526:	80 91 fd 00 	lds	r24, 0x00FD
     52a:	61 2f       	mov	r22, r17
     52c:	0e 94 07 10 	call	0x200e	; 0x200e <__udivmodqi4>
     530:	68 2f       	mov	r22, r24
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SevSegment_enuDisplayNumber>
     538:	8f e6       	ldi	r24, 0x6F	; 111
     53a:	97 e1       	ldi	r25, 0x17	; 23
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <main+0x466>
     540:	00 c0       	rjmp	.+0      	; 0x542 <main+0x46c>
     542:	00 00       	nop
		  _delay_ms(3);
//********************************************** Display Hours ********************************************/

           
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,1);
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,1);
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	41 e0       	ldi	r20, 0x01	; 1
     554:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,1);
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	62 e0       	ldi	r22, 0x02	; 2
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,1);
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	63 e0       	ldi	r22, 0x03	; 3
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,0);
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	64 e0       	ldi	r22, 0x04	; 4
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,1);  		 
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	65 e0       	ldi	r22, 0x05	; 5
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 SevSegment_enuDisplayNumber(DIO_u8_PORTB,Global_u8Counter_Hours%10);
     580:	80 91 fc 00 	lds	r24, 0x00FC
     584:	61 2f       	mov	r22, r17
     586:	0e 94 07 10 	call	0x200e	; 0x200e <__udivmodqi4>
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	69 2f       	mov	r22, r25
     58e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SevSegment_enuDisplayNumber>
     592:	af e6       	ldi	r26, 0x6F	; 111
     594:	b7 e1       	ldi	r27, 0x17	; 23
     596:	11 97       	sbiw	r26, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <main+0x4c0>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <main+0x4c6>
     59c:	00 00       	nop
		  _delay_ms(3);
		  
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN0,1);
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	41 e0       	ldi	r20, 0x01	; 1
     5a4:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN1,1);
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN2,1);
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	62 e0       	ldi	r22, 0x02	; 2
     5b6:	41 e0       	ldi	r20, 0x01	; 1
     5b8:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,1);
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	63 e0       	ldi	r22, 0x03	; 3
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,1);
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	64 e0       	ldi	r22, 0x04	; 4
     5ca:	41 e0       	ldi	r20, 0x01	; 1
     5cc:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		  DIO_enuSetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,0);
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	65 e0       	ldi	r22, 0x05	; 5
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
		 SevSegment_enuDisplayNumber(DIO_u8_PORTB,Global_u8Counter_Hours/10); 
     5da:	80 91 fc 00 	lds	r24, 0x00FC
     5de:	61 2f       	mov	r22, r17
     5e0:	0e 94 07 10 	call	0x200e	; 0x200e <__udivmodqi4>
     5e4:	68 2f       	mov	r22, r24
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SevSegment_enuDisplayNumber>
     5ec:	8f e6       	ldi	r24, 0x6F	; 111
     5ee:	97 e1       	ldi	r25, 0x17	; 23
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <main+0x51a>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <main+0x520>
     5f6:	00 00       	nop
     5f8:	c7 cd       	rjmp	.-1138   	; 0x188 <main+0xb2>

000005fa <SevSegment_enuDisplayNumber>:
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
	if(Copy_u8Port>DIO_u8_PORTD || Copy_u8Number >9)
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	08 f0       	brcs	.+2      	; 0x600 <SevSegment_enuDisplayNumber+0x6>
     5fe:	51 c0       	rjmp	.+162    	; 0x6a2 <SevSegment_enuDisplayNumber+0xa8>
     600:	6a 30       	cpi	r22, 0x0A	; 10
     602:	08 f0       	brcs	.+2      	; 0x606 <SevSegment_enuDisplayNumber+0xc>
     604:	50 c0       	rjmp	.+160    	; 0x6a6 <SevSegment_enuDisplayNumber+0xac>
		Local_enuErrorStatus = SevSegment_NOK;
	}

	else
	{
		switch  (Copy_u8Number)
     606:	64 30       	cpi	r22, 0x04	; 4
     608:	71 f1       	breq	.+92     	; 0x666 <SevSegment_enuDisplayNumber+0x6c>
     60a:	65 30       	cpi	r22, 0x05	; 5
     60c:	50 f4       	brcc	.+20     	; 0x622 <SevSegment_enuDisplayNumber+0x28>
     60e:	61 30       	cpi	r22, 0x01	; 1
     610:	d9 f0       	breq	.+54     	; 0x648 <SevSegment_enuDisplayNumber+0x4e>
     612:	61 30       	cpi	r22, 0x01	; 1
     614:	a0 f0       	brcs	.+40     	; 0x63e <SevSegment_enuDisplayNumber+0x44>
     616:	62 30       	cpi	r22, 0x02	; 2
     618:	e1 f0       	breq	.+56     	; 0x652 <SevSegment_enuDisplayNumber+0x58>
     61a:	63 30       	cpi	r22, 0x03	; 3
     61c:	09 f0       	breq	.+2      	; 0x620 <SevSegment_enuDisplayNumber+0x26>
     61e:	45 c0       	rjmp	.+138    	; 0x6aa <SevSegment_enuDisplayNumber+0xb0>
     620:	1d c0       	rjmp	.+58     	; 0x65c <SevSegment_enuDisplayNumber+0x62>
     622:	67 30       	cpi	r22, 0x07	; 7
     624:	79 f1       	breq	.+94     	; 0x684 <SevSegment_enuDisplayNumber+0x8a>
     626:	68 30       	cpi	r22, 0x08	; 8
     628:	28 f4       	brcc	.+10     	; 0x634 <SevSegment_enuDisplayNumber+0x3a>
     62a:	65 30       	cpi	r22, 0x05	; 5
     62c:	09 f1       	breq	.+66     	; 0x670 <SevSegment_enuDisplayNumber+0x76>
     62e:	66 30       	cpi	r22, 0x06	; 6
     630:	e1 f5       	brne	.+120    	; 0x6aa <SevSegment_enuDisplayNumber+0xb0>
     632:	23 c0       	rjmp	.+70     	; 0x67a <SevSegment_enuDisplayNumber+0x80>
     634:	68 30       	cpi	r22, 0x08	; 8
     636:	59 f1       	breq	.+86     	; 0x68e <SevSegment_enuDisplayNumber+0x94>
     638:	69 30       	cpi	r22, 0x09	; 9
     63a:	b9 f5       	brne	.+110    	; 0x6aa <SevSegment_enuDisplayNumber+0xb0>
     63c:	2d c0       	rjmp	.+90     	; 0x698 <SevSegment_enuDisplayNumber+0x9e>
      	    {
                  case 0 :
                 	               DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_ZERO);
     63e:	6f e3       	ldi	r22, 0x3F	; 63
     640:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     644:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch  (Copy_u8Number)
      	    {
                  case 0 :
                 	               DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_ZERO);
                 	                        break;
     646:	08 95       	ret
                  case 1 :
                 	               DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_ONE);
     648:	66 e0       	ldi	r22, 0x06	; 6
     64a:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     64e:	80 e0       	ldi	r24, 0x00	; 0
                  case 0 :
                 	               DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_ZERO);
                 	                        break;
                  case 1 :
                 	               DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_ONE);
                 	       		            break;
     650:	08 95       	ret
                  case 2 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_TWO);
     652:	6b e5       	ldi	r22, 0x5B	; 91
     654:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     658:	80 e0       	ldi	r24, 0x00	; 0
                  case 1 :
                 	               DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_ONE);
                 	       		            break;
                  case 2 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_TWO);
                      		       		   break;
     65a:	08 95       	ret
                  case 3 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_THREE);
     65c:	6f e4       	ldi	r22, 0x4F	; 79
     65e:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     662:	80 e0       	ldi	r24, 0x00	; 0
                  case 2 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_TWO);
                      		       		   break;
                  case 3 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_THREE);
                      		       		   break;
     664:	08 95       	ret
                  case 4 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_FOUR);
     666:	66 e6       	ldi	r22, 0x66	; 102
     668:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     66c:	80 e0       	ldi	r24, 0x00	; 0
                  case 3 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_THREE);
                      		       		   break;
                  case 4 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_FOUR);
                      		       		   break;
     66e:	08 95       	ret
                  case 5 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_FIVE);
     670:	6d e6       	ldi	r22, 0x6D	; 109
     672:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     676:	80 e0       	ldi	r24, 0x00	; 0
                  case 4 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_FOUR);
                      		       		   break;
                  case 5 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_FIVE);
                      		       		   break;
     678:	08 95       	ret
                  case 6 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_SIX);
     67a:	6d e7       	ldi	r22, 0x7D	; 125
     67c:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     680:	80 e0       	ldi	r24, 0x00	; 0
                  case 5 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_FIVE);
                      		       		   break;
                  case 6 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_SIX);
                      		       		   break;
     682:	08 95       	ret
                  case 7 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_SEVEN);
     684:	67 e0       	ldi	r22, 0x07	; 7
     686:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     68a:	80 e0       	ldi	r24, 0x00	; 0
                  case 6 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_SIX);
                      		       		   break;
                  case 7 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_SEVEN);
                      		       		   break;
     68c:	08 95       	ret
                  case 8 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_EIGHT);
     68e:	6f e7       	ldi	r22, 0x7F	; 127
     690:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     694:	80 e0       	ldi	r24, 0x00	; 0
                  case 7 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_SEVEN);
                      		       		   break;
                  case 8 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_EIGHT);
                      		       		   break;
     696:	08 95       	ret
                  case 9 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_NINE);
     698:	6f e6       	ldi	r22, 0x6F	; 111
     69a:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_enuSetPortValue>
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     69e:	80 e0       	ldi	r24, 0x00	; 0
                  case 8 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_EIGHT);
                      		       		   break;
                  case 9 :
                      		   DIO_enuSetPortValue (Copy_u8Port,SevSegment_u8_NINE);
                      		       		   break;
     6a0:	08 95       	ret
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
	if(Copy_u8Port>DIO_u8_PORTD || Copy_u8Number >9)
	{
		Local_enuErrorStatus = SevSegment_NOK;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	08 95       	ret
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	08 95       	ret
 *              Second Argument: Copy_u8Number                 options(From ONE to NINE)
 * Return: Error Status ->>>>>>>DIO_OK , DIO_NOK
 * */
SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     6aa:	80 e0       	ldi	r24, 0x00	; 0

               }

	}
	return Local_enuErrorStatus;
}
     6ac:	08 95       	ret

000006ae <SevSegment_enuDisplayNumber_BCD>:



SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber_BCD(u8 Copy_u8Number)
{
     6ae:	cf 93       	push	r28
     6b0:	c8 2f       	mov	r28, r24
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
	if(Copy_u8Number >9)
     6b2:	8a 30       	cpi	r24, 0x0A	; 10
     6b4:	00 f5       	brcc	.+64     	; 0x6f6 <SevSegment_enuDisplayNumber_BCD+0x48>
		Local_enuErrorStatus = SevSegment_NOK;
	}

	else
	{
	    DIO_enuSetPinValue(SevSegment_u8_PIN0_PORT,SevSegment_u8_PIN0,((Copy_u8Number>>0 ) & 0x01));
     6b6:	48 2f       	mov	r20, r24
     6b8:	41 70       	andi	r20, 0x01	; 1
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
	    DIO_enuSetPinValue(SevSegment_u8_PIN1_PORT,SevSegment_u8_PIN1,((Copy_u8Number>>1 ) & 0x01));
     6c2:	4c 2f       	mov	r20, r28
     6c4:	46 95       	lsr	r20
     6c6:	41 70       	andi	r20, 0x01	; 1
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
	    DIO_enuSetPinValue(SevSegment_u8_PIN2_PORT,SevSegment_u8_PIN2,((Copy_u8Number>>2 ) & 0x01));
     6d0:	4c 2f       	mov	r20, r28
     6d2:	46 95       	lsr	r20
     6d4:	46 95       	lsr	r20
     6d6:	41 70       	andi	r20, 0x01	; 1
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	62 e0       	ldi	r22, 0x02	; 2
     6dc:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
	    DIO_enuSetPinValue(SevSegment_u8_PIN3_PORT,SevSegment_u8_PIN3,((Copy_u8Number>>3 ) & 0x01));
     6e0:	c6 95       	lsr	r28
     6e2:	c6 95       	lsr	r28
     6e4:	c6 95       	lsr	r28
     6e6:	4c 2f       	mov	r20, r28
     6e8:	41 70       	andi	r20, 0x01	; 1
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	63 e0       	ldi	r22, 0x03	; 3
     6ee:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>



SevSegment_tenuErrorStatus SevSegment_enuDisplayNumber_BCD(u8 Copy_u8Number)
{
	SevSegment_tenuErrorStatus Local_enuErrorStatus=SevSegment_OK;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <SevSegment_enuDisplayNumber_BCD+0x4a>
	if(Copy_u8Number >9)
	{
		Local_enuErrorStatus = SevSegment_NOK;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
	    DIO_enuSetPinValue(SevSegment_u8_PIN2_PORT,SevSegment_u8_PIN2,((Copy_u8Number>>2 ) & 0x01));
	    DIO_enuSetPinValue(SevSegment_u8_PIN3_PORT,SevSegment_u8_PIN3,((Copy_u8Number>>3 ) & 0x01));
    }
	
	return Local_enuErrorStatus;
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <KEYPAD_vidInit>:
#include "KEYPAD_int.h"
#include "KEYPAD_cfg.h"

void KEYPAD_vidInit()
{
  DIO_vidInit();
     6fc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <DIO_vidInit>
}
     700:	08 95       	ret

00000702 <KEYPAD_enuGetPressedKey>:
extern u8  KEYPAD_au8ColsPins[KEYPAD_u8_COLS_NUM];
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
{
     702:	2f 92       	push	r2
     704:	3f 92       	push	r3
     706:	4f 92       	push	r4
     708:	5f 92       	push	r5
     70a:	6f 92       	push	r6
     70c:	7f 92       	push	r7
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	27 97       	sbiw	r28, 0x07	; 7
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	1c 01       	movw	r2, r24
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
	u8 Local_u8RowIterator=0;
	u8 Local_u8ColIterator=0;
    u8 Local_u8Test=0;
     738:	19 82       	std	Y+1, r1	; 0x01

    if (Add_u8KeyValue == NULL)
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	09 f4       	brne	.+2      	; 0x740 <KEYPAD_enuGetPressedKey+0x3e>
     73e:	6d c0       	rjmp	.+218    	; 0x81a <KEYPAD_enuGetPressedKey+0x118>
    	Local_enuErrorStatus=KEYPAD_NOK;
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
     740:	84 e6       	ldi	r24, 0x64	; 100
     742:	f1 01       	movw	r30, r2
     744:	80 83       	st	Z, r24
     746:	0f 2e       	mov	r0, r31
     748:	f9 ea       	ldi	r31, 0xA9	; 169
     74a:	af 2e       	mov	r10, r31
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	bf 2e       	mov	r11, r31
     750:	f0 2d       	mov	r31, r0
     752:	0f 2e       	mov	r0, r31
     754:	fd ea       	ldi	r31, 0xAD	; 173
     756:	8f 2e       	mov	r8, r31
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	9f 2e       	mov	r9, r31
     75c:	f0 2d       	mov	r31, r0
     75e:	66 24       	eor	r6, r6
     760:	77 24       	eor	r7, r7
	         	for(Local_u8ColIterator=0 ; Local_u8ColIterator<KEYPAD_u8_COLS_NUM ; Local_u8ColIterator++)
	         		{
                            DIO_enuGetPinValue(KEYPAD_au8ColsPORT[Local_u8ColIterator],KEYPAD_au8ColsPins[Local_u8ColIterator],&Local_u8Test);
                            if(Local_u8Test==0)
                            {
                         	   *Add_u8KeyValue=KEYPAD_au8Buttons[Local_u8RowIterator][Local_u8ColIterator];
     762:	3d 82       	std	Y+5, r3	; 0x05
     764:	2c 82       	std	Y+4, r2	; 0x04
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
	         {
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_LOW);
     766:	7f 82       	std	Y+7, r7	; 0x07
     768:	6e 82       	std	Y+6, r6	; 0x06

extern u8  KEYPAD_au8ColsPins[KEYPAD_u8_COLS_NUM];
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
     76a:	15 01       	movw	r2, r10
     76c:	9b 82       	std	Y+3, r9	; 0x03
     76e:	8a 82       	std	Y+2, r8	; 0x02
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
	         {
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_LOW);
     770:	f5 01       	movw	r30, r10
     772:	80 81       	ld	r24, Z
     774:	f4 01       	movw	r30, r8
     776:	60 81       	ld	r22, Z
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
     77e:	0f 2e       	mov	r0, r31
     780:	f1 ea       	ldi	r31, 0xA1	; 161
     782:	ef 2e       	mov	r14, r31
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	ff 2e       	mov	r15, r31
     788:	f0 2d       	mov	r31, r0
     78a:	0f 2e       	mov	r0, r31
     78c:	f5 ea       	ldi	r31, 0xA5	; 165
     78e:	cf 2e       	mov	r12, r31
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	df 2e       	mov	r13, r31
     794:	f0 2d       	mov	r31, r0
     796:	00 e0       	ldi	r16, 0x00	; 0
     798:	10 e0       	ldi	r17, 0x00	; 0
	         	for(Local_u8ColIterator=0 ; Local_u8ColIterator<KEYPAD_u8_COLS_NUM ; Local_u8ColIterator++)
	         		{
                            DIO_enuGetPinValue(KEYPAD_au8ColsPORT[Local_u8ColIterator],KEYPAD_au8ColsPins[Local_u8ColIterator],&Local_u8Test);
     79a:	f6 01       	movw	r30, r12
     79c:	61 91       	ld	r22, Z+
     79e:	6f 01       	movw	r12, r30
     7a0:	f7 01       	movw	r30, r14
     7a2:	81 91       	ld	r24, Z+
     7a4:	7f 01       	movw	r14, r30
     7a6:	ae 01       	movw	r20, r28
     7a8:	4f 5f       	subi	r20, 0xFF	; 255
     7aa:	5f 4f       	sbci	r21, 0xFF	; 255
     7ac:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_enuGetPinValue>
                            if(Local_u8Test==0)
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	88 23       	and	r24, r24
     7b4:	81 f4       	brne	.+32     	; 0x7d6 <KEYPAD_enuGetPressedKey+0xd4>
                            {
                         	   *Add_u8KeyValue=KEYPAD_au8Buttons[Local_u8RowIterator][Local_u8ColIterator];
     7b6:	8e 81       	ldd	r24, Y+6	; 0x06
     7b8:	9f 81       	ldd	r25, Y+7	; 0x07
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	80 0f       	add	r24, r16
     7c4:	91 1f       	adc	r25, r17
     7c6:	8f 54       	subi	r24, 0x4F	; 79
     7c8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ca:	fc 01       	movw	r30, r24
     7cc:	80 81       	ld	r24, Z
     7ce:	ec 81       	ldd	r30, Y+4	; 0x04
     7d0:	fd 81       	ldd	r31, Y+5	; 0x05
     7d2:	80 83       	st	Z, r24
                         	   break;
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <KEYPAD_enuGetPressedKey+0xde>
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
	         {
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_LOW);
	         	for(Local_u8ColIterator=0 ; Local_u8ColIterator<KEYPAD_u8_COLS_NUM ; Local_u8ColIterator++)
     7da:	04 30       	cpi	r16, 0x04	; 4
     7dc:	11 05       	cpc	r17, r1
     7de:	e9 f6       	brne	.-70     	; 0x79a <KEYPAD_enuGetPressedKey+0x98>
     7e0:	08 94       	sec
     7e2:	a1 1c       	adc	r10, r1
     7e4:	b1 1c       	adc	r11, r1
     7e6:	08 94       	sec
     7e8:	81 1c       	adc	r8, r1
     7ea:	91 1c       	adc	r9, r1
                            {
                         	   *Add_u8KeyValue=KEYPAD_au8Buttons[Local_u8RowIterator][Local_u8ColIterator];
                         	   break;
                            }
	         		}
	         	DIO_enuSetPinValue(KEYPAD_au8RowsPORT[Local_u8RowIterator],KEYPAD_au8RowsPins[Local_u8RowIterator],DIO_u8_HIGH);
     7ec:	f1 01       	movw	r30, r2
     7ee:	80 81       	ld	r24, Z
     7f0:	ea 81       	ldd	r30, Y+2	; 0x02
     7f2:	fb 81       	ldd	r31, Y+3	; 0x03
     7f4:	60 81       	ld	r22, Z
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
	         	if(*Add_u8KeyValue!=KEYPAD_u8_NOTPRESSED)
     7fc:	ec 81       	ldd	r30, Y+4	; 0x04
     7fe:	fd 81       	ldd	r31, Y+5	; 0x05
     800:	80 81       	ld	r24, Z
     802:	84 36       	cpi	r24, 0x64	; 100
     804:	61 f4       	brne	.+24     	; 0x81e <KEYPAD_enuGetPressedKey+0x11c>
     806:	08 94       	sec
     808:	61 1c       	adc	r6, r1
     80a:	71 1c       	adc	r7, r1
    if (Add_u8KeyValue == NULL)
    	Local_enuErrorStatus=KEYPAD_NOK;
    else
    {
    	*Add_u8KeyValue=KEYPAD_u8_NOTPRESSED;
        	for(Local_u8RowIterator=0 ; Local_u8RowIterator<KEYPAD_u8_ROWS_NUM ; Local_u8RowIterator++)
     80c:	f4 e0       	ldi	r31, 0x04	; 4
     80e:	6f 16       	cp	r6, r31
     810:	71 04       	cpc	r7, r1
     812:	09 f0       	breq	.+2      	; 0x816 <KEYPAD_enuGetPressedKey+0x114>
     814:	a8 cf       	rjmp	.-176    	; 0x766 <KEYPAD_enuGetPressedKey+0x64>
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
{
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	03 c0       	rjmp	.+6      	; 0x820 <KEYPAD_enuGetPressedKey+0x11e>
	u8 Local_u8RowIterator=0;
	u8 Local_u8ColIterator=0;
    u8 Local_u8Test=0;

    if (Add_u8KeyValue == NULL)
    	Local_enuErrorStatus=KEYPAD_NOK;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	01 c0       	rjmp	.+2      	; 0x820 <KEYPAD_enuGetPressedKey+0x11e>
extern  u8 KEYPAD_au8ColsPORT[KEYPAD_u8_COLS_NUM];


KEYPAD_tenuErrorStatus KEYPAD_enuGetPressedKey(u8 *Add_u8KeyValue)
{
	KEYPAD_tenuErrorStatus Local_enuErrorStatus = KEYPAD_OK;
     81e:	80 e0       	ldi	r24, 0x00	; 0
	         		}
	         }

    }
	return Local_enuErrorStatus;
}
     820:	27 96       	adiw	r28, 0x07	; 7
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	bf 90       	pop	r11
     83e:	af 90       	pop	r10
     840:	9f 90       	pop	r9
     842:	8f 90       	pop	r8
     844:	7f 90       	pop	r7
     846:	6f 90       	pop	r6
     848:	5f 90       	pop	r5
     84a:	4f 90       	pop	r4
     84c:	3f 90       	pop	r3
     84e:	2f 90       	pop	r2
     850:	08 95       	ret

00000852 <LCD_vidSendEnable>:
//------------PRIVATE------------//


static void LCD_vidSendEnable(void)
{
	DIO_enuSetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
     85c:	89 ef       	ldi	r24, 0xF9	; 249
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <__stack+0x1>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__stack+0x7>
     866:	00 00       	nop
	_delay_ms(1);
	DIO_enuSetPinValue(LCD_u8_E_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
}
     872:	08 95       	ret

00000874 <LCD_enuSendCharacter>:
 * Description: send ASCII CODE Character to LCD Microcontroller
 * Argument: Copy_u8Character   (The Desired Character to be Displayed)
 * Return: void
 * */
void LCD_enuSendCharacter(u8 Copy_u8Character)
{
     874:	cf 93       	push	r28
     876:	c8 2f       	mov	r28, r24
#elif defined four_bit_mode


           // *************************** SENDING THE THE HIGH NIBBLE FIRST *******************************/////
       	    		  /* Rs pin ----> high */
       	    		  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

       	    		  /* RW pin ----> low */
       	    		  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

                      // Send data //
       	    		  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 4) & 1);
     88c:	4c 2f       	mov	r20, r28
     88e:	42 95       	swap	r20
     890:	4f 70       	andi	r20, 0x0F	; 15
     892:	41 70       	andi	r20, 0x01	; 1
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	64 e0       	ldi	r22, 0x04	; 4
     898:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 5) & 1);
     89c:	4c 2f       	mov	r20, r28
     89e:	42 95       	swap	r20
     8a0:	46 95       	lsr	r20
     8a2:	47 70       	andi	r20, 0x07	; 7
     8a4:	41 70       	andi	r20, 0x01	; 1
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 6) & 1);
     8ae:	4c 2f       	mov	r20, r28
     8b0:	42 95       	swap	r20
     8b2:	46 95       	lsr	r20
     8b4:	46 95       	lsr	r20
     8b6:	43 70       	andi	r20, 0x03	; 3
     8b8:	41 70       	andi	r20, 0x01	; 1
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	66 e0       	ldi	r22, 0x06	; 6
     8be:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
       	    		  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 7) & 1);
     8c2:	4c 2f       	mov	r20, r28
     8c4:	44 1f       	adc	r20, r20
     8c6:	44 27       	eor	r20, r20
     8c8:	44 1f       	adc	r20, r20
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	67 e0       	ldi	r22, 0x07	; 7
     8ce:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

       	    		  //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
       	    		  // Enable //
       	    		  LCD_vidSendEnable();
     8d2:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vidSendEnable>
						 
		 // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
						  	  /* Rs pin ----> high */
				       DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
				       
				       /* RW pin ----> low */
				       DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
				       
				       // Send data //
				       DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 0) & 1);
     8ea:	4c 2f       	mov	r20, r28
     8ec:	41 70       	andi	r20, 0x01	; 1
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	64 e0       	ldi	r22, 0x04	; 4
     8f2:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 1) & 1);
     8f6:	4c 2f       	mov	r20, r28
     8f8:	46 95       	lsr	r20
     8fa:	41 70       	andi	r20, 0x01	; 1
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	65 e0       	ldi	r22, 0x05	; 5
     900:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 2) & 1);
     904:	4c 2f       	mov	r20, r28
     906:	46 95       	lsr	r20
     908:	46 95       	lsr	r20
     90a:	41 70       	andi	r20, 0x01	; 1
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	66 e0       	ldi	r22, 0x06	; 6
     910:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
				       DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 3) & 1);
     914:	c6 95       	lsr	r28
     916:	c6 95       	lsr	r28
     918:	c6 95       	lsr	r28
     91a:	4c 2f       	mov	r20, r28
     91c:	41 70       	andi	r20, 0x01	; 1
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	67 e0       	ldi	r22, 0x07	; 7
     922:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
				       
				       
				       //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
				       // Enable //
				         LCD_vidSendEnable();	
     926:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vidSendEnable>
     92a:	87 eb       	ldi	r24, 0xB7	; 183
     92c:	9b e0       	ldi	r25, 0x0B	; 11
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <LCD_enuSendCharacter+0xba>
     932:	00 c0       	rjmp	.+0      	; 0x934 <LCD_enuSendCharacter+0xc0>
     934:	00 00       	nop
						 _delay_ms(12);
						
	#endif					  
						 
}
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <LCD_enuSendInstruction>:
 * Description: send instruction to LCD Microcontroller
 * Argument: Copy_u8Instruction   (The Desired Instruction to be Executed)
 * Return: Error Status >>>>> LCD_OK , LCD_NOK
 * */
LCD_enutErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction)
{
     93a:	cf 93       	push	r28
     93c:	c8 2f       	mov	r28, r24
			  _delay_ms(4);
		#elif defined four_bit_mode	  
		
 // *************************** SENDING THE THE HIGH NIBBLE FIRST ********************************//////	 
			  /* Rs pin ----> low */
			  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

			  /* RW pin ----> low */
			  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

			  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 4) & 1);
     952:	4c 2f       	mov	r20, r28
     954:	42 95       	swap	r20
     956:	4f 70       	andi	r20, 0x0F	; 15
     958:	41 70       	andi	r20, 0x01	; 1
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	64 e0       	ldi	r22, 0x04	; 4
     95e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 5) & 1);
     962:	4c 2f       	mov	r20, r28
     964:	42 95       	swap	r20
     966:	46 95       	lsr	r20
     968:	47 70       	andi	r20, 0x07	; 7
     96a:	41 70       	andi	r20, 0x01	; 1
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	65 e0       	ldi	r22, 0x05	; 5
     970:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 6) & 1);
     974:	4c 2f       	mov	r20, r28
     976:	42 95       	swap	r20
     978:	46 95       	lsr	r20
     97a:	46 95       	lsr	r20
     97c:	43 70       	andi	r20, 0x03	; 3
     97e:	41 70       	andi	r20, 0x01	; 1
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	66 e0       	ldi	r22, 0x06	; 6
     984:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 7) & 1);
     988:	4c 2f       	mov	r20, r28
     98a:	44 1f       	adc	r20, r20
     98c:	44 27       	eor	r20, r20
     98e:	44 1f       	adc	r20, r20
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	67 e0       	ldi	r22, 0x07	; 7
     994:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

			  // Enable //
			  LCD_vidSendEnable();
     998:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vidSendEnable>
			  
    // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
			  	  /* Rs pin ----> low */
			  	  DIO_enuSetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

			  	  /* RW pin ----> low */
			  	  DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

			  	  // Send instructions //
			  	  DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 0) & 1);
     9b0:	4c 2f       	mov	r20, r28
     9b2:	41 70       	andi	r20, 0x01	; 1
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	64 e0       	ldi	r22, 0x04	; 4
     9b8:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 1) & 1);
     9bc:	4c 2f       	mov	r20, r28
     9be:	46 95       	lsr	r20
     9c0:	41 70       	andi	r20, 0x01	; 1
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	65 e0       	ldi	r22, 0x05	; 5
     9c6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 2) & 1);
     9ca:	4c 2f       	mov	r20, r28
     9cc:	46 95       	lsr	r20
     9ce:	46 95       	lsr	r20
     9d0:	41 70       	andi	r20, 0x01	; 1
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	66 e0       	ldi	r22, 0x06	; 6
     9d6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>
			  	  DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 3) & 1);
     9da:	c6 95       	lsr	r28
     9dc:	c6 95       	lsr	r28
     9de:	c6 95       	lsr	r28
     9e0:	4c 2f       	mov	r20, r28
     9e2:	41 70       	andi	r20, 0x01	; 1
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_enuSetPinValue>

			  	  // Enable //
			  	  LCD_vidSendEnable();
     9ec:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vidSendEnable>
     9f0:	87 eb       	ldi	r24, 0xB7	; 183
     9f2:	9b e0       	ldi	r25, 0x0B	; 11
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <LCD_enuSendInstruction+0xba>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <LCD_enuSendInstruction+0xc0>
     9fa:	00 00       	nop
				 _delay_ms(12);
	  }

#endif
     return Local_enuErrorStatus;
}
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <LCD_VidInit>:
     a02:	8f e3       	ldi	r24, 0x3F	; 63
     a04:	9f e1       	ldi	r25, 0x1F	; 31
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <LCD_VidInit+0x4>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <LCD_VidInit+0xa>
     a0c:	00 00       	nop
 
 #elif defined four_bit_mode 
 	_delay_ms(32);


   LCD_enuSendInstruction(0x02);
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>

 	/* function set */
 	LCD_enuSendInstruction(LCD_u8_FUNCTION_SET);
     a14:	88 e2       	ldi	r24, 0x28	; 40
     a16:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
     a1a:	89 ef       	ldi	r24, 0xF9	; 249
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <LCD_VidInit+0x1c>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <LCD_VidInit+0x22>
     a24:	00 00       	nop

 	_delay_ms(1);
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURSOR_OFF);
     a26:	8c e0       	ldi	r24, 0x0C	; 12
     a28:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
     a2c:	89 ef       	ldi	r24, 0xF9	; 249
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <LCD_VidInit+0x2e>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <LCD_VidInit+0x34>
     a36:	00 00       	nop

 	_delay_ms(1);
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
     a3e:	83 ef       	ldi	r24, 0xF3	; 243
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_VidInit+0x40>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <LCD_VidInit+0x46>
     a48:	00 00       	nop
 //	LCD_enuSendInstruction(LCD_u8_RETURN_HOME);

 	_delay_ms(2);
	 
 	/* entry mode */
 	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
     a4a:	86 e0       	ldi	r24, 0x06	; 6
     a4c:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
     a50:	85 ed       	ldi	r24, 0xD5	; 213
     a52:	96 e0       	ldi	r25, 0x06	; 6
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <LCD_VidInit+0x52>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <LCD_VidInit+0x58>
     a5a:	00 00       	nop
 	_delay_ms(7);

 #endif
}
     a5c:	08 95       	ret

00000a5e <LCD_enuGoTo>:

LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;

	 if(Copy_u8Row >LCD_u8_ROW1 ||  Copy_u8Col>LCD_u8_COL15)
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	98 f4       	brcc	.+38     	; 0xa88 <LCD_enuGoTo+0x2a>
     a62:	60 31       	cpi	r22, 0x10	; 16
     a64:	98 f4       	brcc	.+38     	; 0xa8c <LCD_enuGoTo+0x2e>
	 {
		 Local_enuErrorStatus = LCD_NOK;
	 }
	 else
	 {
		 switch (Copy_u8Row)
     a66:	88 23       	and	r24, r24
     a68:	19 f0       	breq	.+6      	; 0xa70 <LCD_enuGoTo+0x12>
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	89 f4       	brne	.+34     	; 0xa90 <LCD_enuGoTo+0x32>
     a6e:	06 c0       	rjmp	.+12     	; 0xa7c <LCD_enuGoTo+0x1e>
		 {
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
     a70:	86 2f       	mov	r24, r22
     a72:	80 58       	subi	r24, 0x80	; 128
     a74:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
     a78:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch (Copy_u8Row)
		 {
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
		    	                    break;
     a7a:	08 95       	ret
		     case LCD_u8_ROW1:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + (Copy_u8Col+0x40));
     a7c:	86 2f       	mov	r24, r22
     a7e:	80 54       	subi	r24, 0x40	; 64
     a80:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
     a84:	80 e0       	ldi	r24, 0x00	; 0
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
		    	                    break;
		     case LCD_u8_ROW1:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + (Copy_u8Col+0x40));
		    	                    break;
     a86:	08 95       	ret
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;

	 if(Copy_u8Row >LCD_u8_ROW1 ||  Copy_u8Col>LCD_u8_COL15)
	 {
		 Local_enuErrorStatus = LCD_NOK;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	08 95       	ret
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
     a90:	80 e0       	ldi	r24, 0x00	; 0
		    	                    break;
		 }

	 }
    return Local_enuErrorStatus;
}
     a92:	08 95       	ret

00000a94 <LCD_enuSendString>:


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;

		if(Add_pu8String == NULL)
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	51 f0       	breq	.+20     	; 0xab2 <LCD_enuSendString+0x1e>
		{
			Local_enuErrorStatus = LCD_NOK;
		}
		else
		{
                  while(*Add_pu8String!='\0')
     a9e:	88 81       	ld	r24, Y
     aa0:	88 23       	and	r24, r24
     aa2:	49 f0       	breq	.+18     	; 0xab6 <LCD_enuSendString+0x22>
	 }
    return Local_enuErrorStatus;
}


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
     aa4:	21 96       	adiw	r28, 0x01	; 1
		}
		else
		{
                  while(*Add_pu8String!='\0')
                     {
                	  LCD_enuSendCharacter(*Add_pu8String);
     aa6:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
		{
			Local_enuErrorStatus = LCD_NOK;
		}
		else
		{
                  while(*Add_pu8String!='\0')
     aaa:	89 91       	ld	r24, Y+
     aac:	88 23       	and	r24, r24
     aae:	d9 f7       	brne	.-10     	; 0xaa6 <LCD_enuSendString+0x12>
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <LCD_enuSendString+0x24>
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;

		if(Add_pu8String == NULL)
		{
			Local_enuErrorStatus = LCD_NOK;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <LCD_enuSendString+0x24>
}


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
                	  LCD_enuSendCharacter(*Add_pu8String);
                    	   Add_pu8String++;
                    }
		}
		return Local_enuErrorStatus;
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <LCD_enuSendCustomCharacter>:


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
{
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	ec 01       	movw	r28, r24
     ace:	f6 2e       	mov	r15, r22
     ad0:	e4 2e       	mov	r14, r20
     ad2:	d2 2e       	mov	r13, r18
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
     u8 Local_u8Iterator=8;
	if(Add_u8Pattern == NULL || Copy_u8NumOfBlock > 7 || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Col > LCD_u8_COL15)
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	41 f1       	breq	.+80     	; 0xb28 <LCD_enuSendCustomCharacter+0x6a>
     ad8:	87 e0       	ldi	r24, 0x07	; 7
     ada:	86 17       	cp	r24, r22
     adc:	38 f1       	brcs	.+78     	; 0xb2c <LCD_enuSendCustomCharacter+0x6e>
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	94 17       	cp	r25, r20
     ae2:	30 f1       	brcs	.+76     	; 0xb30 <LCD_enuSendCustomCharacter+0x72>
     ae4:	8f e0       	ldi	r24, 0x0F	; 15
     ae6:	82 17       	cp	r24, r18
     ae8:	28 f1       	brcs	.+74     	; 0xb34 <LCD_enuSendCustomCharacter+0x76>
		Local_enuErrorStatus=LCD_NOK;
	}

	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
     aea:	86 2f       	mov	r24, r22
     aec:	88 0f       	add	r24, r24
     aee:	88 0f       	add	r24, r24
     af0:	88 0f       	add	r24, r24
     af2:	80 5c       	subi	r24, 0xC0	; 192
     af4:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
		}
		return Local_enuErrorStatus;
}


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
     af8:	8e 01       	movw	r16, r28
     afa:	08 5f       	subi	r16, 0xF8	; 248
     afc:	1f 4f       	sbci	r17, 0xFF	; 255
	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
	    while(Local_u8Iterator--)
		  {
	    	LCD_enuSendCharacter (*Add_u8Pattern);
     afe:	89 91       	ld	r24, Y+
     b00:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     b04:	81 ee       	ldi	r24, 0xE1	; 225
     b06:	94 e0       	ldi	r25, 0x04	; 4
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCD_enuSendCustomCharacter+0x4a>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <LCD_enuSendCustomCharacter+0x50>
     b0e:	00 00       	nop
	}

	else
	{
	      LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_u8NumOfBlock*8)); // the block is 8 byte so we jumb a block not a byte
	    while(Local_u8Iterator--)
     b10:	c0 17       	cp	r28, r16
     b12:	d1 07       	cpc	r29, r17
     b14:	a1 f7       	brne	.-24     	; 0xafe <LCD_enuSendCustomCharacter+0x40>
	    	LCD_enuSendCharacter (*Add_u8Pattern);
		    Add_u8Pattern++;
		    _delay_ms(5);
	      }

	    LCD_enuGoTo(Copy_u8Row,Copy_u8Col);
     b16:	8e 2d       	mov	r24, r14
     b18:	6d 2d       	mov	r22, r13
     b1a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
	    LCD_enuSendCharacter(Copy_u8NumOfBlock);
     b1e:	8f 2d       	mov	r24, r15
     b20:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
}


LCD_enutErrorStatus LCD_enuSendCustomCharacter(u8 *Add_u8Pattern,u8 Copy_u8NumOfBlock , u8 Copy_u8Row , u8 Copy_u8Col)
{
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <LCD_enuSendCustomCharacter+0x78>
     u8 Local_u8Iterator=8;
	if(Add_u8Pattern == NULL || Copy_u8NumOfBlock > 7 || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Col > LCD_u8_COL15)
	{
		Local_enuErrorStatus=LCD_NOK;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <LCD_enuSendCustomCharacter+0x78>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <LCD_enuSendCustomCharacter+0x78>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <LCD_enuSendCustomCharacter+0x78>
     b34:	81 e0       	ldi	r24, 0x01	; 1
	    LCD_enuGoTo(Copy_u8Row,Copy_u8Col);
	    LCD_enuSendCharacter(Copy_u8NumOfBlock);
	}

	return Local_enuErrorStatus;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	08 95       	ret

00000b46 <LCD_enuSendNumber>:




void LCD_enuSendNumber(u32 Copy_u32Number)
{
     b46:	8f 92       	push	r8
     b48:	9f 92       	push	r9
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	2f 97       	sbiw	r28, 0x0f	; 15
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	8b 01       	movw	r16, r22
     b6a:	9c 01       	movw	r18, r24

    u8 Local_u8Reminder=0;
    u8 LCD_au8Reminder[15];
    u8 Local_u8Index=0;
	s8 Local_s8Iterator;
	if(Copy_u32Number == 0)
     b6c:	61 15       	cp	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	81 05       	cpc	r24, r1
     b72:	91 05       	cpc	r25, r1
     b74:	21 f4       	brne	.+8      	; 0xb7e <LCD_enuSendNumber+0x38>
	{
		LCD_enuSendCharacter('0');
     b76:	80 e3       	ldi	r24, 0x30	; 48
     b78:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     b7c:	33 c0       	rjmp	.+102    	; 0xbe4 <LCD_enuSendNumber+0x9e>

    u8 Local_u8Reminder=0;
    u8 LCD_au8Reminder[15];
    u8 Local_u8Index=0;
	s8 Local_s8Iterator;
	if(Copy_u32Number == 0)
     b7e:	ff 24       	eor	r15, r15
	}
	else
	{
          while(Copy_u32Number!=0)
          {
	          Local_u8Reminder=Copy_u32Number%10;   //    1
     b80:	0f 2e       	mov	r0, r31
     b82:	fa e0       	ldi	r31, 0x0A	; 10
     b84:	8f 2e       	mov	r8, r31
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	9f 2e       	mov	r9, r31
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	af 2e       	mov	r10, r31
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	bf 2e       	mov	r11, r31
     b92:	f0 2d       	mov	r31, r0
	          Copy_u32Number=Copy_u32Number/10;   //1
     b94:	c9 01       	movw	r24, r18
     b96:	b8 01       	movw	r22, r16
     b98:	a5 01       	movw	r20, r10
     b9a:	94 01       	movw	r18, r8
     b9c:	0e 94 13 10 	call	0x2026	; 0x2026 <__udivmodsi4>
     ba0:	89 01       	movw	r16, r18
     ba2:	9a 01       	movw	r18, r20
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
     ba4:	e1 e0       	ldi	r30, 0x01	; 1
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	ef 0d       	add	r30, r15
     bae:	f1 1d       	adc	r31, r1
     bb0:	60 83       	st	Z, r22
	          Local_u8Index++;
     bb2:	f3 94       	inc	r15
	{
		LCD_enuSendCharacter('0');
	}
	else
	{
          while(Copy_u32Number!=0)
     bb4:	01 15       	cp	r16, r1
     bb6:	11 05       	cpc	r17, r1
     bb8:	21 05       	cpc	r18, r1
     bba:	31 05       	cpc	r19, r1
     bbc:	59 f7       	brne	.-42     	; 0xb94 <LCD_enuSendNumber+0x4e>
	          Copy_u32Number=Copy_u32Number/10;   //1
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
	          Local_u8Index++;
          }
          
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
     bbe:	1f 2d       	mov	r17, r15
     bc0:	11 50       	subi	r17, 0x01	; 1
     bc2:	82 f0       	brmi	.+32     	; 0xbe4 <LCD_enuSendNumber+0x9e>
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
     bc4:	e1 2f       	mov	r30, r17
     bc6:	ff 27       	eor	r31, r31
     bc8:	e7 fd       	sbrc	r30, 7
     bca:	f0 95       	com	r31
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	8c 0f       	add	r24, r28
     bd2:	9d 1f       	adc	r25, r29
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	80 81       	ld	r24, Z
     bda:	80 5d       	subi	r24, 0xD0	; 208
     bdc:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
	          Copy_u32Number=Copy_u32Number/10;   //1
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
	          Local_u8Index++;
          }
          
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
     be0:	11 50       	subi	r17, 0x01	; 1
     be2:	82 f7       	brpl	.-32     	; 0xbc4 <LCD_enuSendNumber+0x7e>
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
	}		  

}
     be4:	2f 96       	adiw	r28, 0x0f	; 15
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	08 95       	ret

00000c04 <LCD_vidPrintMyName>:


void LCD_vidPrintMyName()
{
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
		 u8 Local_u8Col=0;
		 u8 Local_u8LastRow=0;
		 u8 Local_u8LastCol =0;
		 u8 Local_u8Flag=0;

         LCD_enuSendCharacter('S');
     c12:	83 e5       	ldi	r24, 0x53	; 83
     c14:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
		 LCD_enuGoTo(1,1);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		 LCD_enuSendCharacter('E');
     c20:	85 e4       	ldi	r24, 0x45	; 69
     c22:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
		 LCD_enuGoTo(0,2);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		 LCD_enuSendCharacter('I');
     c2e:	89 e4       	ldi	r24, 0x49	; 73
     c30:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
		 LCD_enuGoTo(1,3);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	63 e0       	ldi	r22, 0x03	; 3
     c38:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		 LCD_enuSendCharacter('F');
     c3c:	86 e4       	ldi	r24, 0x46	; 70
     c3e:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     c42:	8f e4       	ldi	r24, 0x4F	; 79
     c44:	93 ec       	ldi	r25, 0xC3	; 195
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <LCD_vidPrintMyName+0x42>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <LCD_vidPrintMyName+0x48>
     c4c:	00 00       	nop
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
     c4e:	80 e1       	ldi	r24, 0x10	; 16
     c50:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_enuSendInstruction>
{
	u8 Local_u8Row=0;
		 u8 Local_u8Col=0;
		 u8 Local_u8LastRow=0;
		 u8 Local_u8LastCol =0;
		 u8 Local_u8Flag=0;
     c54:	dd 24       	eor	r13, r13
		 LCD_enuSendCharacter('I');
		 LCD_enuGoTo(1,3);
		 LCD_enuSendCharacter('F');
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
	     Local_u8Col=4;
     c56:	c4 e0       	ldi	r28, 0x04	; 4
	    Local_u8Row=0;
     c58:	d0 e0       	ldi	r29, 0x00	; 0
			{
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
				Local_u8Flag=1;
			}                   // 0 ,4
			else
			{     Local_u8Row=Local_u8Row^1;
     c5a:	ee 24       	eor	r14, r14
     c5c:	e3 94       	inc	r14
	    Local_u8Row=0;

while (Local_u8Col<19)
	   {

		     LCD_enuSendCharacter(0);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>

			if(Local_u8Flag==0)
     c64:	dd 20       	and	r13, r13
     c66:	31 f4       	brne	.+12     	; 0xc74 <LCD_vidPrintMyName+0x70>
			{
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
     c68:	8d 2f       	mov	r24, r29
     c6a:	6c 2f       	mov	r22, r28
     c6c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
				Local_u8Flag=1;
     c70:	de 2c       	mov	r13, r14
     c72:	06 c0       	rjmp	.+12     	; 0xc80 <LCD_vidPrintMyName+0x7c>
			}                   // 0 ,4
			else
			{     Local_u8Row=Local_u8Row^1;
     c74:	de 25       	eor	r29, r14
			Local_u8Col++;
     c76:	cf 5f       	subi	r28, 0xFF	; 255
				LCD_enuGoTo(Local_u8Row,Local_u8Col);
     c78:	8d 2f       	mov	r24, r29
     c7a:	6c 2f       	mov	r22, r28
     c7c:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
			}
			Local_u8LastRow=Local_u8Row;
			Local_u8LastCol=Local_u8Col;
			 LCD_enuSendCharacter('F');
     c80:	86 e4       	ldi	r24, 0x46	; 70
     c82:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     c86:	87 ea       	ldi	r24, 0xA7	; 167
     c88:	91 e6       	ldi	r25, 0x61	; 97
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <LCD_vidPrintMyName+0x86>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <LCD_vidPrintMyName+0x8c>
     c90:	00 00       	nop
			  _delay_ms(100);

			  Local_u8Col-=2;
     c92:	0f 2e       	mov	r0, r31
     c94:	fe ef       	ldi	r31, 0xFE	; 254
     c96:	ff 2e       	mov	r15, r31
     c98:	f0 2d       	mov	r31, r0
     c9a:	fc 0e       	add	r15, r28
		     LCD_enuGoTo(Local_u8Row,Local_u8Col);  // 0,2
     c9c:	8d 2f       	mov	r24, r29
     c9e:	6f 2d       	mov	r22, r15
     ca0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
     caa:	1d 2f       	mov	r17, r29
     cac:	1e 25       	eor	r17, r14
		     Local_u8Col++;
     cae:	6c 2f       	mov	r22, r28
     cb0:	61 50       	subi	r22, 0x01	; 1
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); //1,3
     cb2:	81 2f       	mov	r24, r17
     cb4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		     LCD_enuSendCharacter('I');
     cb8:	89 e4       	ldi	r24, 0x49	; 73
     cba:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     cbe:	87 ea       	ldi	r24, 0xA7	; 167
     cc0:	91 e6       	ldi	r25, 0x61	; 97
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <LCD_vidPrintMyName+0xbe>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <LCD_vidPrintMyName+0xc4>
     cc8:	00 00       	nop
		     _delay_ms(100);

		     Local_u8Col-=2;
     cca:	0c 2f       	mov	r16, r28
     ccc:	03 50       	subi	r16, 0x03	; 3
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 1 1
     cce:	81 2f       	mov	r24, r17
     cd0:	60 2f       	mov	r22, r16
     cd2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
		     Local_u8Col++;
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 0 2
     cdc:	8d 2f       	mov	r24, r29
     cde:	6f 2d       	mov	r22, r15
     ce0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		     LCD_enuSendCharacter('E');
     ce4:	85 e4       	ldi	r24, 0x45	; 69
     ce6:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     cea:	87 ea       	ldi	r24, 0xA7	; 167
     cec:	91 e6       	ldi	r25, 0x61	; 97
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <LCD_vidPrintMyName+0xea>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <LCD_vidPrintMyName+0xf0>
     cf4:	00 00       	nop
		     _delay_ms(100);

		     Local_u8Col-=2;
     cf6:	6c 2f       	mov	r22, r28
     cf8:	64 50       	subi	r22, 0x04	; 4
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 0 0
     cfa:	8d 2f       	mov	r24, r29
     cfc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		     LCD_enuSendCharacter(0);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
		     Local_u8Row=Local_u8Row^1;
		     Local_u8Col++;
		     LCD_enuGoTo(Local_u8Row,Local_u8Col); // 1 1
     d06:	81 2f       	mov	r24, r17
     d08:	60 2f       	mov	r22, r16
     d0a:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_enuGoTo>
		     LCD_enuSendCharacter('S');
     d0e:	83 e5       	ldi	r24, 0x53	; 83
     d10:	0e 94 3a 04 	call	0x874	; 0x874 <LCD_enuSendCharacter>
     d14:	87 ea       	ldi	r24, 0xA7	; 167
     d16:	91 e6       	ldi	r25, 0x61	; 97
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <LCD_vidPrintMyName+0x114>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <LCD_vidPrintMyName+0x11a>
     d1e:	00 00       	nop
	     _delay_ms(200);
	     LCD_enuSendInstruction(LCD_u8_SHIFT_CURSOR_LEFT);
	     Local_u8Col=4;
	    Local_u8Row=0;

while (Local_u8Col<19)
     d20:	c3 31       	cpi	r28, 0x13	; 19
     d22:	08 f4       	brcc	.+2      	; 0xd26 <LCD_vidPrintMyName+0x122>
     d24:	9c cf       	rjmp	.-200    	; 0xc5e <LCD_vidPrintMyName+0x5a>
		     LCD_enuSendCharacter('S');
		     _delay_ms(100);
		     Local_u8Col=Local_u8LastCol;
		     Local_u8Row=Local_u8LastRow;
	 }
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	08 95       	ret

00000d36 <PORT_vidInit>:

#include "../../MCAL/DIO/DIO_int.h"

void PORT_vidInit()
{
	DIO_vidInit();
     d36:	0e 94 9e 06 	call	0xd3c	; 0xd3c <DIO_vidInit>
     d3a:	08 95       	ret

00000d3c <DIO_vidInit>:
       #define DIO_u8_OUTPUT_HIGH            1
       #define DIO_u8_INPUT_FLOATING         0
       #define DIO_u8_INPUT_PULLUP           0

      /* Set DDR Values */
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	8a bb       	out	0x1a, r24	; 26
								, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
								, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);   /* 0b00001111   */

		DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
     d40:	87 bb       	out	0x17, r24	; 23
								, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
								, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

		DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
     d42:	9f e3       	ldi	r25, 0x3F	; 63
     d44:	94 bb       	out	0x14, r25	; 20
								, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
								, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

		DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
     d46:	9f e0       	ldi	r25, 0x0F	; 15
     d48:	91 bb       	out	0x11, r25	; 17
    #define DIO_u8_INPUT_FLOATING         0
    #define DIO_u8_INPUT_PULLUP           1


	/* set Port values */
		DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5
     d4a:	1b ba       	out	0x1b, r1	; 27
									, DIO_u8_PORTA_PIN4 , DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2
									, DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);   /* 0b11110001   */

			DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5
     d4c:	18 ba       	out	0x18, r1	; 24
									, DIO_u8_PORTB_PIN4 , DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2
									, DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

			DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5
     d4e:	15 ba       	out	0x15, r1	; 21
									, DIO_u8_PORTC_PIN4 , DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2
									, DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

			DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5
     d50:	82 bb       	out	0x12, r24	; 18

  #define DIO_u8_OUTPUT_LOW             0
  #define DIO_u8_OUTPUT_HIGH            1
  #define DIO_u8_INPUT_FLOATING         2
  #define DIO_u8_INPUT_PULLUP           3
}
     d52:	08 95       	ret

00000d54 <DIO_enuSetPinValue>:
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 || Copy_u8Value> DIO_u8_HIGH)
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	08 f0       	brcs	.+2      	; 0xd5a <DIO_enuSetPinValue+0x6>
     d58:	8b c0       	rjmp	.+278    	; 0xe70 <DIO_enuSetPinValue+0x11c>
     d5a:	68 30       	cpi	r22, 0x08	; 8
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <DIO_enuSetPinValue+0xc>
     d5e:	8a c0       	rjmp	.+276    	; 0xe74 <DIO_enuSetPinValue+0x120>
     d60:	42 30       	cpi	r20, 0x02	; 2
     d62:	08 f0       	brcs	.+2      	; 0xd66 <DIO_enuSetPinValue+0x12>
     d64:	89 c0       	rjmp	.+274    	; 0xe78 <DIO_enuSetPinValue+0x124>
		Local_enuErrorStatus= DIO_NOK;
	else
	{
		switch (Copy_u8Port)
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	41 f1       	breq	.+80     	; 0xdba <DIO_enuSetPinValue+0x66>
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	38 f0       	brcs	.+14     	; 0xd7c <DIO_enuSetPinValue+0x28>
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_enuSetPinValue+0x20>
     d72:	41 c0       	rjmp	.+130    	; 0xdf6 <DIO_enuSetPinValue+0xa2>
     d74:	83 30       	cpi	r24, 0x03	; 3
     d76:	09 f0       	breq	.+2      	; 0xd7a <DIO_enuSetPinValue+0x26>
     d78:	81 c0       	rjmp	.+258    	; 0xe7c <DIO_enuSetPinValue+0x128>
     d7a:	5b c0       	rjmp	.+182    	; 0xe32 <DIO_enuSetPinValue+0xde>
		{
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
     d7c:	41 30       	cpi	r20, 0x01	; 1
     d7e:	71 f4       	brne	.+28     	; 0xd9c <DIO_enuSetPinValue+0x48>
     d80:	2b b3       	in	r18, 0x1b	; 27
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	ac 01       	movw	r20, r24
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_enuSetPinValue+0x3a>
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	6a 95       	dec	r22
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_enuSetPinValue+0x36>
     d92:	ba 01       	movw	r22, r20
     d94:	62 2b       	or	r22, r18
     d96:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	08 95       	ret
	else
	{
		switch (Copy_u8Port)
		{
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
     d9c:	2b b3       	in	r18, 0x1b	; 27
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	ac 01       	movw	r20, r24
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_enuSetPinValue+0x56>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	6a 95       	dec	r22
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_enuSetPinValue+0x52>
     dae:	ba 01       	movw	r22, r20
     db0:	60 95       	com	r22
     db2:	62 23       	and	r22, r18
     db4:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	08 95       	ret
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
            		break;

            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
     dba:	41 30       	cpi	r20, 0x01	; 1
     dbc:	69 f4       	brne	.+26     	; 0xdd8 <DIO_enuSetPinValue+0x84>
     dbe:	48 b3       	in	r20, 0x18	; 24
     dc0:	21 e0       	ldi	r18, 0x01	; 1
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	c9 01       	movw	r24, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_enuSetPinValue+0x78>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	6a 95       	dec	r22
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_enuSetPinValue+0x74>
     dd0:	84 2b       	or	r24, r20
     dd2:	88 bb       	out	0x18, r24	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	08 95       	ret
            case DIO_u8_PORTA:
            		(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTA_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1<<Copy_u8Pin));
            		break;

            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
     dd8:	28 b3       	in	r18, 0x18	; 24
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	ac 01       	movw	r20, r24
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_enuSetPinValue+0x92>
     de2:	44 0f       	add	r20, r20
     de4:	55 1f       	adc	r21, r21
     de6:	6a 95       	dec	r22
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <DIO_enuSetPinValue+0x8e>
     dea:	ba 01       	movw	r22, r20
     dec:	60 95       	com	r22
     dee:	62 23       	and	r22, r18
     df0:	68 bb       	out	0x18, r22	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	08 95       	ret
            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
     df6:	41 30       	cpi	r20, 0x01	; 1
     df8:	69 f4       	brne	.+26     	; 0xe14 <DIO_enuSetPinValue+0xc0>
     dfa:	45 b3       	in	r20, 0x15	; 21
     dfc:	21 e0       	ldi	r18, 0x01	; 1
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	c9 01       	movw	r24, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_enuSetPinValue+0xb4>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	6a 95       	dec	r22
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_enuSetPinValue+0xb0>
     e0c:	84 2b       	or	r24, r20
     e0e:	85 bb       	out	0x15, r24	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	08 95       	ret
            case DIO_u8_PORTB:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTB_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
     e14:	25 b3       	in	r18, 0x15	; 21
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	ac 01       	movw	r20, r24
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DIO_enuSetPinValue+0xce>
     e1e:	44 0f       	add	r20, r20
     e20:	55 1f       	adc	r21, r21
     e22:	6a 95       	dec	r22
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <DIO_enuSetPinValue+0xca>
     e26:	ba 01       	movw	r22, r20
     e28:	60 95       	com	r22
     e2a:	62 23       	and	r22, r18
     e2c:	65 bb       	out	0x15, r22	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	08 95       	ret
            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTD:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTD_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(1<<Copy_u8Pin));
     e32:	41 30       	cpi	r20, 0x01	; 1
     e34:	71 f4       	brne	.+28     	; 0xe52 <DIO_enuSetPinValue+0xfe>
     e36:	22 b3       	in	r18, 0x12	; 18
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	ac 01       	movw	r20, r24
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_enuSetPinValue+0xf0>
     e40:	44 0f       	add	r20, r20
     e42:	55 1f       	adc	r21, r21
     e44:	6a 95       	dec	r22
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_enuSetPinValue+0xec>
     e48:	ba 01       	movw	r22, r20
     e4a:	62 2b       	or	r22, r18
     e4c:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	08 95       	ret
            case DIO_u8_PORTC:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTC_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1<<Copy_u8Pin));
           				break;

            case DIO_u8_PORTD:
           				(Copy_u8Value == DIO_u8_HIGH)? (DIO_u8_PORTD_REG |= (1<<Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(1<<Copy_u8Pin));
     e52:	22 b3       	in	r18, 0x12	; 18
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	ac 01       	movw	r20, r24
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_enuSetPinValue+0x10c>
     e5c:	44 0f       	add	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	6a 95       	dec	r22
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_enuSetPinValue+0x108>
     e64:	ba 01       	movw	r22, r20
     e66:	60 95       	com	r22
     e68:	62 23       	and	r22, r18
     e6a:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	08 95       	ret
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 || Copy_u8Value> DIO_u8_HIGH)
		Local_enuErrorStatus= DIO_NOK;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	08 95       	ret
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	08 95       	ret
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
           				break;
		}
	}
	return Local_enuErrorStatus;

}
     e7e:	08 95       	ret

00000e80 <DIO_enuGetPinValue>:
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// Error Checks  //
   if((Copy_u8Port>DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	08 f0       	brcs	.+2      	; 0xe86 <DIO_enuGetPinValue+0x6>
     e84:	49 c0       	rjmp	.+146    	; 0xf18 <DIO_enuGetPinValue+0x98>
     e86:	68 30       	cpi	r22, 0x08	; 8
     e88:	08 f0       	brcs	.+2      	; 0xe8c <DIO_enuGetPinValue+0xc>
     e8a:	48 c0       	rjmp	.+144    	; 0xf1c <DIO_enuGetPinValue+0x9c>
     e8c:	41 15       	cp	r20, r1
     e8e:	51 05       	cpc	r21, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <DIO_enuGetPinValue+0x14>
     e92:	46 c0       	rjmp	.+140    	; 0xf20 <DIO_enuGetPinValue+0xa0>
	   Local_enuErrorStatus = DIO_NOK;
   else
   {
	     switch (Copy_u8Port)
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	b1 f0       	breq	.+44     	; 0xec4 <DIO_enuGetPinValue+0x44>
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	30 f0       	brcs	.+12     	; 0xea8 <DIO_enuGetPinValue+0x28>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	01 f1       	breq	.+64     	; 0xee0 <DIO_enuGetPinValue+0x60>
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	09 f0       	breq	.+2      	; 0xea6 <DIO_enuGetPinValue+0x26>
     ea4:	3f c0       	rjmp	.+126    	; 0xf24 <DIO_enuGetPinValue+0xa4>
     ea6:	2a c0       	rjmp	.+84     	; 0xefc <DIO_enuGetPinValue+0x7c>
	   		  {
	               case DIO_u8_PORTA:
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
     ea8:	89 b3       	in	r24, 0x19	; 25
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9c 01       	movw	r18, r24
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_enuGetPinValue+0x34>
     eb0:	35 95       	asr	r19
     eb2:	27 95       	ror	r18
     eb4:	6a 95       	dec	r22
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_enuGetPinValue+0x30>
     eb8:	b9 01       	movw	r22, r18
     eba:	61 70       	andi	r22, 0x01	; 1
     ebc:	fa 01       	movw	r30, r20
     ebe:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
   {
	     switch (Copy_u8Port)
	   		  {
	               case DIO_u8_PORTA:
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
	               		break;
     ec2:	08 95       	ret

	               case DIO_u8_PORTB:
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
     ec4:	86 b3       	in	r24, 0x16	; 22
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9c 01       	movw	r18, r24
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_enuGetPinValue+0x50>
     ecc:	35 95       	asr	r19
     ece:	27 95       	ror	r18
     ed0:	6a 95       	dec	r22
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_enuGetPinValue+0x4c>
     ed4:	b9 01       	movw	r22, r18
     ed6:	61 70       	andi	r22, 0x01	; 1
     ed8:	fa 01       	movw	r30, r20
     eda:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     edc:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINA_REG >> Copy_u8Pin) & 1);
	               		break;

	               case DIO_u8_PORTB:
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
	            	   break;
     ede:	08 95       	ret

	               case DIO_u8_PORTC:
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
     ee0:	83 b3       	in	r24, 0x13	; 19
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9c 01       	movw	r18, r24
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_enuGetPinValue+0x6c>
     ee8:	35 95       	asr	r19
     eea:	27 95       	ror	r18
     eec:	6a 95       	dec	r22
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_enuGetPinValue+0x68>
     ef0:	b9 01       	movw	r22, r18
     ef2:	61 70       	andi	r22, 0x01	; 1
     ef4:	fa 01       	movw	r30, r20
     ef6:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     ef8:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINB_REG>>Copy_u8Pin)& 1) ;
	            	   break;

	               case DIO_u8_PORTC:
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
	            	   break;
     efa:	08 95       	ret

	               case DIO_u8_PORTD:
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
     efc:	80 b3       	in	r24, 0x10	; 16
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9c 01       	movw	r18, r24
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_enuGetPinValue+0x88>
     f04:	35 95       	asr	r19
     f06:	27 95       	ror	r18
     f08:	6a 95       	dec	r22
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_enuGetPinValue+0x84>
     f0c:	b9 01       	movw	r22, r18
     f0e:	61 70       	andi	r22, 0x01	; 1
     f10:	fa 01       	movw	r30, r20
     f12:	60 83       	st	Z, r22
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f14:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PINC_REG>>Copy_u8Pin)& 1) ;
	            	   break;

	               case DIO_u8_PORTD:
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
	            	   break;
     f16:	08 95       	ret
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// Error Checks  //
   if((Copy_u8Port>DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
	   Local_enuErrorStatus = DIO_NOK;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	08 95       	ret
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	08 95       	ret
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f24:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PinValue= ((DIO_u8_PIND_REG>>Copy_u8Pin)& 1) ;
	            	   break;
	   	   	}
   }
   return Local_enuErrorStatus;
}
     f26:	08 95       	ret

00000f28 <DIO_enuSetPortValue>:
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// check error status //
	if((Copy_u8Port>3 )|| (Copy_u8PortValue > 255))
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	a8 f4       	brcc	.+42     	; 0xf56 <DIO_enuSetPortValue+0x2e>
	{
		Local_enuErrorStatus= DIO_NOK;
	}
	else
	{
		 switch (Copy_u8Port)
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	51 f0       	breq	.+20     	; 0xf44 <DIO_enuSetPortValue+0x1c>
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	28 f0       	brcs	.+10     	; 0xf3e <DIO_enuSetPortValue+0x16>
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	49 f0       	breq	.+18     	; 0xf4a <DIO_enuSetPortValue+0x22>
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	79 f4       	brne	.+30     	; 0xf5a <DIO_enuSetPortValue+0x32>
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <DIO_enuSetPortValue+0x28>
	       {
	          case DIO_u8_PORTA:
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
     f3e:	6b bb       	out	0x1b, r22	; 27
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f40:	80 e0       	ldi	r24, 0x00	; 0
	{
		 switch (Copy_u8Port)
	       {
	          case DIO_u8_PORTA:
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
	         		break;
     f42:	08 95       	ret

	          case DIO_u8_PORTB:
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
     f44:	68 bb       	out	0x18, r22	; 24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f46:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTA_REG = Copy_u8PortValue;
	         		break;

	          case DIO_u8_PORTB:
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
	      	   break;
     f48:	08 95       	ret

	          case DIO_u8_PORTC:
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
     f4a:	65 bb       	out	0x15, r22	; 21
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f4c:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTB_REG = Copy_u8PortValue;
	      	   break;

	          case DIO_u8_PORTC:
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
	      	   break;
     f4e:	08 95       	ret

	          case DIO_u8_PORTD:
	        	  DIO_u8_PORTD_REG = Copy_u8PortValue;
     f50:	62 bb       	out	0x12, r22	; 18
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f52:	80 e0       	ldi	r24, 0x00	; 0
	        	  DIO_u8_PORTC_REG = Copy_u8PortValue;
	      	   break;

	          case DIO_u8_PORTD:
	        	  DIO_u8_PORTD_REG = Copy_u8PortValue;
	      	   break;
     f54:	08 95       	ret
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

	// check error status //
	if((Copy_u8Port>3 )|| (Copy_u8PortValue > 255))
	{
		Local_enuErrorStatus= DIO_NOK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8Port, u8 Copy_u8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
	      	   break;
	 	  }
	}

   return Local_enuErrorStatus;
}
     f5c:	08 95       	ret

00000f5e <DIO_enuGetPortValue>:
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

		// check error status //
		if((Copy_u8Port>3 )|| (Add_pu8PortValue == NULL))
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	00 f5       	brcc	.+64     	; 0xfa2 <DIO_enuGetPortValue+0x44>
     f62:	61 15       	cp	r22, r1
     f64:	71 05       	cpc	r23, r1
     f66:	f9 f0       	breq	.+62     	; 0xfa6 <DIO_enuGetPortValue+0x48>
		{
			Local_enuErrorStatus= DIO_NOK;
		}
		else
		{
			 switch (Copy_u8Port)
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	61 f0       	breq	.+24     	; 0xf84 <DIO_enuGetPortValue+0x26>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	28 f0       	brcs	.+10     	; 0xf7a <DIO_enuGetPortValue+0x1c>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	69 f0       	breq	.+26     	; 0xf8e <DIO_enuGetPortValue+0x30>
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	c9 f4       	brne	.+50     	; 0xfaa <DIO_enuGetPortValue+0x4c>
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <DIO_enuGetPortValue+0x3a>
		       {
		          case DIO_u8_PORTA:
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
     f7a:	8b b3       	in	r24, 0x1b	; 27
     f7c:	fb 01       	movw	r30, r22
     f7e:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f80:	80 e0       	ldi	r24, 0x00	; 0
		{
			 switch (Copy_u8Port)
		       {
		          case DIO_u8_PORTA:
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
		        	  break;
     f82:	08 95       	ret

		          case DIO_u8_PORTB:
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
     f84:	88 b3       	in	r24, 0x18	; 24
     f86:	fb 01       	movw	r30, r22
     f88:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f8a:	80 e0       	ldi	r24, 0x00	; 0
		        	  *Add_pu8PortValue= DIO_u8_PORTA_REG ;
		        	  break;

		          case DIO_u8_PORTB:
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
		        	  break;
     f8c:	08 95       	ret

		          case DIO_u8_PORTC:
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
     f8e:	85 b3       	in	r24, 0x15	; 21
     f90:	fb 01       	movw	r30, r22
     f92:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f94:	80 e0       	ldi	r24, 0x00	; 0
		        	  *Add_pu8PortValue= DIO_u8_PORTB_REG ;
		        	  break;

		          case DIO_u8_PORTC:
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
		      	   break;
     f96:	08 95       	ret

		          case DIO_u8_PORTD:
		        	  *Add_pu8PortValue= DIO_u8_PORTD_REG ;
     f98:	82 b3       	in	r24, 0x12	; 18
     f9a:	fb 01       	movw	r30, r22
     f9c:	80 83       	st	Z, r24
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
	            	   *Add_pu8PortValue= DIO_u8_PORTC_REG ;
		      	   break;

		          case DIO_u8_PORTD:
		        	  *Add_pu8PortValue= DIO_u8_PORTD_REG ;
		        	  break;
     fa0:	08 95       	ret
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

		// check error status //
		if((Copy_u8Port>3 )|| (Add_pu8PortValue == NULL))
		{
			Local_enuErrorStatus= DIO_NOK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	08 95       	ret
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	08 95       	ret
 *
 *  Return: Error Status : DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPortValue (u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     faa:	80 e0       	ldi	r24, 0x00	; 0
		        	  break;
		 	  }
		}

	   return Local_enuErrorStatus;
}
     fac:	08 95       	ret

00000fae <DIO_enuTogglePort>:
DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

 	// check error status //
 	if( Copy_u8Port>3 )
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	e8 f4       	brcc	.+58     	; 0xfec <DIO_enuTogglePort+0x3e>
 	{
	 	Local_enuErrorStatus= DIO_NOK;
 	}
	 else
	 {
		 switch (Copy_u8Port)
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	61 f0       	breq	.+24     	; 0xfce <DIO_enuTogglePort+0x20>
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	28 f0       	brcs	.+10     	; 0xfc4 <DIO_enuTogglePort+0x16>
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	69 f0       	breq	.+26     	; 0xfd8 <DIO_enuTogglePort+0x2a>
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	b9 f4       	brne	.+46     	; 0xff0 <DIO_enuTogglePort+0x42>
     fc2:	0f c0       	rjmp	.+30     	; 0xfe2 <DIO_enuTogglePort+0x34>
		 {
	          case DIO_u8_PORTA:
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
     fc4:	8b b3       	in	r24, 0x1b	; 27
     fc6:	80 95       	com	r24
     fc8:	8b bb       	out	0x1b, r24	; 27
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     fca:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch (Copy_u8Port)
		 {
	          case DIO_u8_PORTA:
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
	          break;
     fcc:	08 95       	ret

	          case DIO_u8_PORTB:
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
     fce:	8b b3       	in	r24, 0x1b	; 27
     fd0:	80 95       	com	r24
     fd2:	88 bb       	out	0x18, r24	; 24
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     fd4:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTA_REG ^= 0xFF;  //first way
	          break;

	          case DIO_u8_PORTB:
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
	          break;
     fd6:	08 95       	ret

	          case DIO_u8_PORTC:
	          DIO_u8_PORTC_REG ^= 0xFF;
     fd8:	85 b3       	in	r24, 0x15	; 21
     fda:	80 95       	com	r24
     fdc:	85 bb       	out	0x15, r24	; 21
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     fde:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTB_REG = ~DIO_u8_PORTA_REG; // second way
	          break;

	          case DIO_u8_PORTC:
	          DIO_u8_PORTC_REG ^= 0xFF;
	          break;
     fe0:	08 95       	ret

	          case DIO_u8_PORTD:
	          DIO_u8_PORTD_REG  ^= 0xFF;
     fe2:	82 b3       	in	r24, 0x12	; 18
     fe4:	80 95       	com	r24
     fe6:	82 bb       	out	0x12, r24	; 18
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     fe8:	80 e0       	ldi	r24, 0x00	; 0
	          DIO_u8_PORTC_REG ^= 0xFF;
	          break;

	          case DIO_u8_PORTD:
	          DIO_u8_PORTD_REG  ^= 0xFF;
	          break;
     fea:	08 95       	ret
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;

 	// check error status //
 	if( Copy_u8Port>3 )
 	{
	 	Local_enuErrorStatus= DIO_NOK;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	08 95       	ret
	   return Local_enuErrorStatus;
}

DIO_tenuErrorStatus DIO_enuTogglePort(u8 Copy_u8Port)
{
 	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
		 } 
	 }		 
	 
	 
	 	   return Local_enuErrorStatus;
}
     ff2:	08 95       	ret

00000ff4 <DIO_enuTogglePin>:

DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 )
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	08 f0       	brcs	.+2      	; 0xffa <DIO_enuTogglePin+0x6>
     ff8:	45 c0       	rjmp	.+138    	; 0x1084 <DIO_enuTogglePin+0x90>
     ffa:	68 30       	cpi	r22, 0x08	; 8
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <DIO_enuTogglePin+0xc>
     ffe:	44 c0       	rjmp	.+136    	; 0x1088 <DIO_enuTogglePin+0x94>
	 {
		 Local_enuErrorStatus= DIO_NOK;
	 }		 
	else
	{
		switch (Copy_u8Port)
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	b1 f0       	breq	.+44     	; 0x1030 <DIO_enuTogglePin+0x3c>
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	30 f0       	brcs	.+12     	; 0x1014 <DIO_enuTogglePin+0x20>
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	01 f1       	breq	.+64     	; 0x104c <DIO_enuTogglePin+0x58>
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	09 f0       	breq	.+2      	; 0x1012 <DIO_enuTogglePin+0x1e>
    1010:	3d c0       	rjmp	.+122    	; 0x108c <DIO_enuTogglePin+0x98>
    1012:	2a c0       	rjmp	.+84     	; 0x1068 <DIO_enuTogglePin+0x74>
		{
			case DIO_u8_PORTA:
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
    1014:	2b b3       	in	r18, 0x1b	; 27
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	ac 01       	movw	r20, r24
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_enuTogglePin+0x2e>
    101e:	44 0f       	add	r20, r20
    1020:	55 1f       	adc	r21, r21
    1022:	6a 95       	dec	r22
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_enuTogglePin+0x2a>
    1026:	ba 01       	movw	r22, r20
    1028:	62 27       	eor	r22, r18
    102a:	6b bb       	out	0x1b, r22	; 27



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    102c:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Copy_u8Port)
		{
			case DIO_u8_PORTA:
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
			break;
    102e:	08 95       	ret

			case DIO_u8_PORTB:
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
    1030:	28 b3       	in	r18, 0x18	; 24
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	ac 01       	movw	r20, r24
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_enuTogglePin+0x4a>
    103a:	44 0f       	add	r20, r20
    103c:	55 1f       	adc	r21, r21
    103e:	6a 95       	dec	r22
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_enuTogglePin+0x46>
    1042:	ba 01       	movw	r22, r20
    1044:	62 27       	eor	r22, r18
    1046:	68 bb       	out	0x18, r22	; 24



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1048:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTA_REG ^= (1<<Copy_u8Pin);  
			break;

			case DIO_u8_PORTB:
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
			break;
    104a:	08 95       	ret

			case DIO_u8_PORTC:
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
    104c:	25 b3       	in	r18, 0x15	; 21
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	ac 01       	movw	r20, r24
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_enuTogglePin+0x66>
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_enuTogglePin+0x62>
    105e:	ba 01       	movw	r22, r20
    1060:	62 27       	eor	r22, r18
    1062:	65 bb       	out	0x15, r22	; 21



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1064:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTB_REG ^= (1<<Copy_u8Pin);
			break;

			case DIO_u8_PORTC:
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
			break;
    1066:	08 95       	ret

			case DIO_u8_PORTD:
			DIO_u8_PORTD_REG  ^=(1<<Copy_u8Pin);
    1068:	22 b3       	in	r18, 0x12	; 18
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	ac 01       	movw	r20, r24
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_enuTogglePin+0x82>
    1072:	44 0f       	add	r20, r20
    1074:	55 1f       	adc	r21, r21
    1076:	6a 95       	dec	r22
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_enuTogglePin+0x7e>
    107a:	ba 01       	movw	r22, r20
    107c:	62 27       	eor	r22, r18
    107e:	62 bb       	out	0x12, r22	; 18



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1080:	80 e0       	ldi	r24, 0x00	; 0
			DIO_u8_PORTC_REG ^= (1<<Copy_u8Pin);
			break;

			case DIO_u8_PORTD:
			DIO_u8_PORTD_REG  ^=(1<<Copy_u8Pin);
			break;
    1082:	08 95       	ret
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
	//check error status //
	if(Copy_u8Port > DIO_u8_PORTD || Copy_u8Pin > DIO_u8_PIN7 )
	 {
		 Local_enuErrorStatus= DIO_NOK;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	08 95       	ret
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	08 95       	ret



DIO_tenuErrorStatus DIO_enuTogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    108c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return Local_enuErrorStatus;

}
    108e:	08 95       	ret

00001090 <INT_vidEnableGlobalINT>:
#include "Global_Interrupt_int.h"
#include "Global_Interrupt_prv.h"

void INT_vidEnableGlobalINT()
{
	EXT_INT_u8_SREG_REG  |=0x80;
    1090:	8f b7       	in	r24, 0x3f	; 63
    1092:	80 68       	ori	r24, 0x80	; 128
    1094:	8f bf       	out	0x3f, r24	; 63

}
    1096:	08 95       	ret

00001098 <INT_vidDisableGlobalINT>:

void INT_vidDisableGlobalINT()
{
	EXT_INT_u8_SREG_REG  =0x00;
    1098:	1f be       	out	0x3f, r1	; 63
}
    109a:	08 95       	ret

0000109c <GPT_enuConfigure>:
static const f32 TIMER_PRESCALER_VALUES[] =  {0.0, 1.0, 8.0, 64.0, 256.0, 1024.0};
static const f32 TIMER2_PRESCALER_VALUES[] = {0.0, 1.0, 8.0,32.0, 64.0,128.0, 256.0, 1024.0};
//**************************************************************************************************************************************

GPT_tenuErrorStatus GPT_enuConfigure(u8 Copy_u8Timer,GPT_tstrOptions* Add_strOptions)
{
    109c:	fb 01       	movw	r30, r22
	GPT_tenuErrorStatus Local_enuErrorStatus = GPT_OK;
	 if(Copy_u8Timer > GPT_u8_TIMER2)
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <GPT_enuConfigure+0x8>
    10a2:	6c c0       	rjmp	.+216    	; 0x117c <GPT_enuConfigure+0xe0>
	 {
		 Local_enuErrorStatus = GPT_NOK;
	 }
	 else
	 { 
		 switch(Copy_u8Timer)
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	e1 f0       	breq	.+56     	; 0x10e0 <GPT_enuConfigure+0x44>
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	20 f0       	brcs	.+8      	; 0x10b4 <GPT_enuConfigure+0x18>
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <GPT_enuConfigure+0x16>
    10b0:	67 c0       	rjmp	.+206    	; 0x1180 <GPT_enuConfigure+0xe4>
    10b2:	49 c0       	rjmp	.+146    	; 0x1146 <GPT_enuConfigure+0xaa>
		{
			case GPT_u8_TIMER0 :
                                /* select CTC mode*/
								/*??*/   GPT_u8_TCCR0_REG   |= (Add_strOptions->Local_u8Mode);
    10b4:	93 b7       	in	r25, 0x33	; 51
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	89 2b       	or	r24, r25
    10ba:	83 bf       	out	0x33, r24	; 51
							      Global_u8TIMER0_Mode = (Add_strOptions->Local_u8Mode);
    10bc:	81 81       	ldd	r24, Z+1	; 0x01
    10be:	80 93 07 01 	sts	0x0107, r24
								// Select compare mode //
								GPT_u8_TCCR0_REG   |= (Add_strOptions->Local_u8CompareOutputMode);
    10c2:	93 b7       	in	r25, 0x33	; 51
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	89 2b       	or	r24, r25
    10c8:	83 bf       	out	0x33, r24	; 51
                                /* load a value in OCR0 */
                                GPT_u8_OCR0_REG=Add_strOptions->Local_u8CompareValue;
    10ca:	83 81       	ldd	r24, Z+3	; 0x03
    10cc:	8c bf       	out	0x3c, r24	; 60
                                /* select timer clock */
                          //      GPT_u8_TCCR0_REG |=  Add_strOptions->Local_u8Prescaler;
                              
                                /* enable interrupt*/
                                GPT_u8_TIMSK_REG |= Add_strOptions->Local_u8Interrupt;
    10ce:	99 b7       	in	r25, 0x39	; 57
    10d0:	84 81       	ldd	r24, Z+4	; 0x04
    10d2:	89 2b       	or	r24, r25
    10d4:	89 bf       	out	0x39, r24	; 57
								Global_u8Prescaler_Timer0 = (Add_strOptions->Local_u8Prescaler);
    10d6:	80 81       	ld	r24, Z
    10d8:	80 93 08 01 	sts	0x0108, r24
static const f32 TIMER2_PRESCALER_VALUES[] = {0.0, 1.0, 8.0,32.0, 64.0,128.0, 256.0, 1024.0};
//**************************************************************************************************************************************

GPT_tenuErrorStatus GPT_enuConfigure(u8 Copy_u8Timer,GPT_tstrOptions* Add_strOptions)
{
	GPT_tenuErrorStatus Local_enuErrorStatus = GPT_OK;
    10dc:	80 e0       	ldi	r24, 0x00	; 0
                              
                                /* enable interrupt*/
                                GPT_u8_TIMSK_REG |= Add_strOptions->Local_u8Interrupt;
								Global_u8Prescaler_Timer0 = (Add_strOptions->Local_u8Prescaler);

								break;
    10de:	08 95       	ret
		    case GPT_u8_TIMER1 :
			
			                    GPT_u8_TCCR1B  |= (Add_strOptions->Local_u8Mode);
    10e0:	9e b5       	in	r25, 0x2e	; 46
    10e2:	81 81       	ldd	r24, Z+1	; 0x01
    10e4:	89 2b       	or	r24, r25
    10e6:	8e bd       	out	0x2e, r24	; 46
								Global_u8TIMER1_Mode = (Add_strOptions->Local_u8Mode);
    10e8:	81 81       	ldd	r24, Z+1	; 0x01
    10ea:	80 93 09 01 	sts	0x0109, r24
								GPT_u8_TCCR1A  |= (Add_strOptions->Local_u8CompareOutputMode);
    10ee:	9f b5       	in	r25, 0x2f	; 47
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	89 2b       	or	r24, r25
    10f4:	8f bd       	out	0x2f, r24	; 47
								if( (Add_strOptions->Local_u8DesiredPin)==GPT_u8_OC1A)
    10f6:	85 81       	ldd	r24, Z+5	; 0x05
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	69 f4       	brne	.+26     	; 0x1116 <GPT_enuConfigure+0x7a>
								{   
								    GPT_u16_OCR1AL |= (Add_strOptions->Local_u8CompareValue);
    10fc:	2a b5       	in	r18, 0x2a	; 42
    10fe:	3b b5       	in	r19, 0x2b	; 43
    1100:	83 81       	ldd	r24, Z+3	; 0x03
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	82 2b       	or	r24, r18
    1106:	93 2b       	or	r25, r19
    1108:	9b bd       	out	0x2b, r25	; 43
    110a:	8a bd       	out	0x2a, r24	; 42
									Global_u8DesiredPin = Add_strOptions->Local_u8DesiredPin;
    110c:	85 81       	ldd	r24, Z+5	; 0x05
    110e:	80 93 0a 01 	sts	0x010A, r24
static const f32 TIMER2_PRESCALER_VALUES[] = {0.0, 1.0, 8.0,32.0, 64.0,128.0, 256.0, 1024.0};
//**************************************************************************************************************************************

GPT_tenuErrorStatus GPT_enuConfigure(u8 Copy_u8Timer,GPT_tstrOptions* Add_strOptions)
{
	GPT_tenuErrorStatus Local_enuErrorStatus = GPT_OK;
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	10 c0       	rjmp	.+32     	; 0x1136 <GPT_enuConfigure+0x9a>
								if( (Add_strOptions->Local_u8DesiredPin)==GPT_u8_OC1A)
								{   
								    GPT_u16_OCR1AL |= (Add_strOptions->Local_u8CompareValue);
									Global_u8DesiredPin = Add_strOptions->Local_u8DesiredPin;
								}
								else if (Add_strOptions->Local_u8DesiredPin==GPT_u8_OC1B)
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	69 f4       	brne	.+26     	; 0x1134 <GPT_enuConfigure+0x98>
								{	
									GPT_u16_OCR1BL |= (Add_strOptions->Local_u8CompareValue);
    111a:	28 b5       	in	r18, 0x28	; 40
    111c:	39 b5       	in	r19, 0x29	; 41
    111e:	83 81       	ldd	r24, Z+3	; 0x03
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	82 2b       	or	r24, r18
    1124:	93 2b       	or	r25, r19
    1126:	99 bd       	out	0x29, r25	; 41
    1128:	88 bd       	out	0x28, r24	; 40
									Global_u8DesiredPin = Add_strOptions->Local_u8DesiredPin;
    112a:	85 81       	ldd	r24, Z+5	; 0x05
    112c:	80 93 0a 01 	sts	0x010A, r24
static const f32 TIMER2_PRESCALER_VALUES[] = {0.0, 1.0, 8.0,32.0, 64.0,128.0, 256.0, 1024.0};
//**************************************************************************************************************************************

GPT_tenuErrorStatus GPT_enuConfigure(u8 Copy_u8Timer,GPT_tstrOptions* Add_strOptions)
{
	GPT_tenuErrorStatus Local_enuErrorStatus = GPT_OK;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <GPT_enuConfigure+0x9a>
									GPT_u16_OCR1BL |= (Add_strOptions->Local_u8CompareValue);
									Global_u8DesiredPin = Add_strOptions->Local_u8DesiredPin;
								}
								else
								{
									Local_enuErrorStatus= GPT_NOK;
    1134:	81 e0       	ldi	r24, 0x01	; 1
								}
			                    GPT_u8_TIMSK_REG   |= (Add_strOptions->Local_u8Interrupt);
    1136:	29 b7       	in	r18, 0x39	; 57
    1138:	94 81       	ldd	r25, Z+4	; 0x04
    113a:	92 2b       	or	r25, r18
    113c:	99 bf       	out	0x39, r25	; 57
							    Global_u8Prescaler_Timer1 = (Add_strOptions->Local_u8Prescaler);
    113e:	90 81       	ld	r25, Z
    1140:	90 93 0b 01 	sts	0x010B, r25
								break;
    1144:	08 95       	ret
			case GPT_u8_TIMER2 : 
			                    GPT_u8_TCCR2_REG   |= (Add_strOptions->Local_u8Mode);
    1146:	95 b5       	in	r25, 0x25	; 37
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	89 2b       	or	r24, r25
    114c:	85 bd       	out	0x25, r24	; 37
								Global_u8TIMER2_Mode = (Add_strOptions->Local_u8Mode);
    114e:	81 81       	ldd	r24, Z+1	; 0x01
    1150:	80 93 0c 01 	sts	0x010C, r24
			                    GPT_u8_TCCR2_REG   |= (Add_strOptions->Local_u8CompareOutputMode);
    1154:	95 b5       	in	r25, 0x25	; 37
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	89 2b       	or	r24, r25
    115a:	85 bd       	out	0x25, r24	; 37
			                    GPT_u8_OCR2_REG    |= (Add_strOptions->Local_u8CompareValue);
    115c:	93 b5       	in	r25, 0x23	; 35
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	89 2b       	or	r24, r25
    1162:	83 bd       	out	0x23, r24	; 35
			                    GPT_u8_TIMSK_REG   |= (Add_strOptions->Local_u8Interrupt);
    1164:	99 b7       	in	r25, 0x39	; 57
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	89 2b       	or	r24, r25
    116a:	89 bf       	out	0x39, r24	; 57
			                    Global_u8Prescaler_Timer2 = (Add_strOptions->Local_u8Prescaler);
    116c:	80 81       	ld	r24, Z
    116e:	80 93 0d 01 	sts	0x010D, r24
								GPT_u8_ASSR_REG |= GPT_Asynchronise_Option;
    1172:	82 b5       	in	r24, 0x22	; 34
    1174:	88 60       	ori	r24, 0x08	; 8
    1176:	82 bd       	out	0x22, r24	; 34
static const f32 TIMER2_PRESCALER_VALUES[] = {0.0, 1.0, 8.0,32.0, 64.0,128.0, 256.0, 1024.0};
//**************************************************************************************************************************************

GPT_tenuErrorStatus GPT_enuConfigure(u8 Copy_u8Timer,GPT_tstrOptions* Add_strOptions)
{
	GPT_tenuErrorStatus Local_enuErrorStatus = GPT_OK;
    1178:	80 e0       	ldi	r24, 0x00	; 0
			                    GPT_u8_TCCR2_REG   |= (Add_strOptions->Local_u8CompareOutputMode);
			                    GPT_u8_OCR2_REG    |= (Add_strOptions->Local_u8CompareValue);
			                    GPT_u8_TIMSK_REG   |= (Add_strOptions->Local_u8Interrupt);
			                    Global_u8Prescaler_Timer2 = (Add_strOptions->Local_u8Prescaler);
								GPT_u8_ASSR_REG |= GPT_Asynchronise_Option;
			                    break;						
    117a:	08 95       	ret
GPT_tenuErrorStatus GPT_enuConfigure(u8 Copy_u8Timer,GPT_tstrOptions* Add_strOptions)
{
	GPT_tenuErrorStatus Local_enuErrorStatus = GPT_OK;
	 if(Copy_u8Timer > GPT_u8_TIMER2)
	 {
		 Local_enuErrorStatus = GPT_NOK;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	08 95       	ret
static const f32 TIMER2_PRESCALER_VALUES[] = {0.0, 1.0, 8.0,32.0, 64.0,128.0, 256.0, 1024.0};
//**************************************************************************************************************************************

GPT_tenuErrorStatus GPT_enuConfigure(u8 Copy_u8Timer,GPT_tstrOptions* Add_strOptions)
{
	GPT_tenuErrorStatus Local_enuErrorStatus = GPT_OK;
    1180:	80 e0       	ldi	r24, 0x00	; 0
			                    					
		}		            

	 }
	return Local_enuErrorStatus;
}
    1182:	08 95       	ret

00001184 <GPT_enuDelay_ms>:

 GPT_tenuErrorStatus GPT_enuDelay_ms(u8 Copy_u8ChannelNumber, u16 Copy_u16TimeMs)
{
	GPT_tenuErrorStatus Loc_enuErrorStatus = GPT_OK;

	if(Copy_u8ChannelNumber > GPT_u8_TIMER2)
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	08 f0       	brcs	.+2      	; 0x118a <GPT_enuDelay_ms+0x6>
    1188:	6f c0       	rjmp	.+222    	; 0x1268 <GPT_enuDelay_ms+0xe4>
	{
		Loc_enuErrorStatus = GPT_NOK;
	}
	else
	{
		switch(Copy_u8ChannelNumber)
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	39 f1       	breq	.+78     	; 0x11dc <GPT_enuDelay_ms+0x58>
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	20 f0       	brcs	.+8      	; 0x119a <GPT_enuDelay_ms+0x16>
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	09 f0       	breq	.+2      	; 0x1198 <GPT_enuDelay_ms+0x14>
    1196:	6a c0       	rjmp	.+212    	; 0x126c <GPT_enuDelay_ms+0xe8>
    1198:	46 c0       	rjmp	.+140    	; 0x1226 <GPT_enuDelay_ms+0xa2>
		{
			// Prescaler = 64 , Fcpu=8000000 , desired time = 1ms
	     	case GPT_u8_TIMER0:
	  	        	/* preload value to count 1 ms */
             		GPT_u8_TCNT0_REG = 131;
    119a:	83 e8       	ldi	r24, 0x83	; 131
    119c:	82 bf       	out	0x32, r24	; 50
             		/* set the Prescaler to 64 and start the timer */
             		
             		GPT_u8_TCCR0_REG &= ~(0x07); // to clear Prescaler
    119e:	83 b7       	in	r24, 0x33	; 51
    11a0:	88 7f       	andi	r24, 0xF8	; 248
    11a2:	83 bf       	out	0x33, r24	; 51
             		GPT_u8_TCCR0_REG |= GPT_u8_NO_PRESCALER_64;
    11a4:	83 b7       	in	r24, 0x33	; 51
    11a6:	83 60       	ori	r24, 0x03	; 3
    11a8:	83 bf       	out	0x33, r24	; 51
             
             		/* wait until the desired time in ms pass */
             		while(Copy_u16TimeMs != 0)
    11aa:	61 15       	cp	r22, r1
    11ac:	71 05       	cpc	r23, r1
    11ae:	89 f0       	breq	.+34     	; 0x11d2 <GPT_enuDelay_ms+0x4e>
	                   
	  	                	/* clear the overflow flag */
	  	                	GPT_u8_TIFR_REG |= 1;
	                   
	  	                	/* load the preload value again */
	  	                	GPT_u8_TCNT0_REG = 131;
    11b0:	93 e8       	ldi	r25, 0x83	; 131
             		GPT_u8_TCCR0_REG |= GPT_u8_NO_PRESCALER_64;
             
             		/* wait until the desired time in ms pass */
             		while(Copy_u16TimeMs != 0)
             		{
             			--Copy_u16TimeMs;
    11b2:	61 50       	subi	r22, 0x01	; 1
    11b4:	70 40       	sbci	r23, 0x00	; 0
             
             			/* wait until overflow flag rises
             			 * note that overflow takes 1 ms
             			 */
             			while((GPT_u8_TIFR_REG & 1) == 0)
    11b6:	08 b6       	in	r0, 0x38	; 56
    11b8:	00 fc       	sbrc	r0, 0
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <GPT_enuDelay_ms+0x40>
             			{
             				asm("NOP");
    11bc:	00 00       	nop
             			--Copy_u16TimeMs;
             
             			/* wait until overflow flag rises
             			 * note that overflow takes 1 ms
             			 */
             			while((GPT_u8_TIFR_REG & 1) == 0)
    11be:	08 b6       	in	r0, 0x38	; 56
    11c0:	00 fe       	sbrs	r0, 0
    11c2:	fc cf       	rjmp	.-8      	; 0x11bc <GPT_enuDelay_ms+0x38>
             			{
             				asm("NOP");
	 	    	    	}
	                   
	  	                	/* clear the overflow flag */
	  	                	GPT_u8_TIFR_REG |= 1;
    11c4:	88 b7       	in	r24, 0x38	; 56
    11c6:	81 60       	ori	r24, 0x01	; 1
    11c8:	88 bf       	out	0x38, r24	; 56
	                   
	  	                	/* load the preload value again */
	  	                	GPT_u8_TCNT0_REG = 131;
    11ca:	92 bf       	out	0x32, r25	; 50
             		
             		GPT_u8_TCCR0_REG &= ~(0x07); // to clear Prescaler
             		GPT_u8_TCCR0_REG |= GPT_u8_NO_PRESCALER_64;
             
             		/* wait until the desired time in ms pass */
             		while(Copy_u16TimeMs != 0)
    11cc:	61 15       	cp	r22, r1
    11ce:	71 05       	cpc	r23, r1
    11d0:	81 f7       	brne	.-32     	; 0x11b2 <GPT_enuDelay_ms+0x2e>
	  	                	/* load the preload value again */
	  	                	GPT_u8_TCNT0_REG = 131;
	  	             }
	                   
	 	             /* disable the timer */
	 	           	GPT_u8_TCCR0_REG &= ~(0x07); // to clear Prescaler
    11d2:	83 b7       	in	r24, 0x33	; 51
    11d4:	88 7f       	andi	r24, 0xF8	; 248
    11d6:	83 bf       	out	0x33, r24	; 51
	return Local_enuErrorStatus;
}

 GPT_tenuErrorStatus GPT_enuDelay_ms(u8 Copy_u8ChannelNumber, u16 Copy_u16TimeMs)
{
	GPT_tenuErrorStatus Loc_enuErrorStatus = GPT_OK;
    11d8:	80 e0       	ldi	r24, 0x00	; 0
	  	                	GPT_u8_TCNT0_REG = 131;
	  	             }
	                   
	 	             /* disable the timer */
	 	           	GPT_u8_TCCR0_REG &= ~(0x07); // to clear Prescaler
	 	            break;
    11da:	08 95       	ret

			case GPT_u8_TIMER1:
				/* preload value to count 1 ms */
				GPT_u16_TCNT1L = 65411;
    11dc:	83 e8       	ldi	r24, 0x83	; 131
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	9d bd       	out	0x2d, r25	; 45
    11e2:	8c bd       	out	0x2c, r24	; 44

				/* set the Prescaler to 64 and start the timer */
				GPT_u8_TCCR1B &= ~(0x07);
    11e4:	8e b5       	in	r24, 0x2e	; 46
    11e6:	88 7f       	andi	r24, 0xF8	; 248
    11e8:	8e bd       	out	0x2e, r24	; 46
				GPT_u8_TCCR1B |= GPT_u8_NO_PRESCALER_64;
    11ea:	8e b5       	in	r24, 0x2e	; 46
    11ec:	83 60       	ori	r24, 0x03	; 3
    11ee:	8e bd       	out	0x2e, r24	; 46

				/* wait until the desired time in ms pass */
				while(Copy_u16TimeMs != 0)
    11f0:	61 15       	cp	r22, r1
    11f2:	71 05       	cpc	r23, r1
    11f4:	99 f0       	breq	.+38     	; 0x121c <GPT_enuDelay_ms+0x98>

					/* clear the overflow flag */
					GPT_u8_TIFR_REG |= 0X04;

					/* load the preload value again */
					GPT_u16_TCNT1L = 65411;
    11f6:	83 e8       	ldi	r24, 0x83	; 131
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
				GPT_u8_TCCR1B |= GPT_u8_NO_PRESCALER_64;

				/* wait until the desired time in ms pass */
				while(Copy_u16TimeMs != 0)
				{
					--Copy_u16TimeMs;
    11fa:	61 50       	subi	r22, 0x01	; 1
    11fc:	70 40       	sbci	r23, 0x00	; 0

					/* wait until overflow flag rises
					 * note that overflow takes 1 ms
					 */
					while((GPT_u8_TIFR_REG & 0x04) == 0)
    11fe:	08 b6       	in	r0, 0x38	; 56
    1200:	02 fc       	sbrc	r0, 2
    1202:	04 c0       	rjmp	.+8      	; 0x120c <GPT_enuDelay_ms+0x88>
					{
						asm("NOP");
    1204:	00 00       	nop
					--Copy_u16TimeMs;

					/* wait until overflow flag rises
					 * note that overflow takes 1 ms
					 */
					while((GPT_u8_TIFR_REG & 0x04) == 0)
    1206:	08 b6       	in	r0, 0x38	; 56
    1208:	02 fe       	sbrs	r0, 2
    120a:	fc cf       	rjmp	.-8      	; 0x1204 <GPT_enuDelay_ms+0x80>
					{
						asm("NOP");
					}

					/* clear the overflow flag */
					GPT_u8_TIFR_REG |= 0X04;
    120c:	28 b7       	in	r18, 0x38	; 56
    120e:	24 60       	ori	r18, 0x04	; 4
    1210:	28 bf       	out	0x38, r18	; 56

					/* load the preload value again */
					GPT_u16_TCNT1L = 65411;
    1212:	9d bd       	out	0x2d, r25	; 45
    1214:	8c bd       	out	0x2c, r24	; 44
				/* set the Prescaler to 64 and start the timer */
				GPT_u8_TCCR1B &= ~(0x07);
				GPT_u8_TCCR1B |= GPT_u8_NO_PRESCALER_64;

				/* wait until the desired time in ms pass */
				while(Copy_u16TimeMs != 0)
    1216:	61 15       	cp	r22, r1
    1218:	71 05       	cpc	r23, r1
    121a:	79 f7       	brne	.-34     	; 0x11fa <GPT_enuDelay_ms+0x76>
					/* load the preload value again */
					GPT_u16_TCNT1L = 65411;
				}

				/* disable the timer */
				GPT_u8_TCCR1B &= ~(0x07);
    121c:	8e b5       	in	r24, 0x2e	; 46
    121e:	88 7f       	andi	r24, 0xF8	; 248
    1220:	8e bd       	out	0x2e, r24	; 46
	return Local_enuErrorStatus;
}

 GPT_tenuErrorStatus GPT_enuDelay_ms(u8 Copy_u8ChannelNumber, u16 Copy_u16TimeMs)
{
	GPT_tenuErrorStatus Loc_enuErrorStatus = GPT_OK;
    1222:	80 e0       	ldi	r24, 0x00	; 0
					GPT_u16_TCNT1L = 65411;
				}

				/* disable the timer */
				GPT_u8_TCCR1B &= ~(0x07);
				break;
    1224:	08 95       	ret

			case GPT_u8_TIMER2:
				/* preload value to count 1 ms */
				GPT_u8_TCNT2_REG = 131;
    1226:	83 e8       	ldi	r24, 0x83	; 131
    1228:	84 bd       	out	0x24, r24	; 36

				/* set the Prescaler to 64 and start the timer */
				GPT_u8_TCCR2_REG &= ~(0x07);
    122a:	85 b5       	in	r24, 0x25	; 37
    122c:	88 7f       	andi	r24, 0xF8	; 248
    122e:	85 bd       	out	0x25, r24	; 37
				GPT_u8_TCCR2_REG |= GPT_u8_NO_PRESCALER_64;
    1230:	85 b5       	in	r24, 0x25	; 37
    1232:	83 60       	ori	r24, 0x03	; 3
    1234:	85 bd       	out	0x25, r24	; 37

				/* wait until the desired time in ms pass */
				while(Copy_u16TimeMs != 0)
    1236:	61 15       	cp	r22, r1
    1238:	71 05       	cpc	r23, r1
    123a:	89 f0       	breq	.+34     	; 0x125e <GPT_enuDelay_ms+0xda>

					/* clear the ovwrflow flag */
					GPT_u8_TIFR_REG |= 0X40;

					/* load the preload value again */
					GPT_u8_TCNT2_REG = 131;
    123c:	93 e8       	ldi	r25, 0x83	; 131
				GPT_u8_TCCR2_REG |= GPT_u8_NO_PRESCALER_64;

				/* wait until the desired time in ms pass */
				while(Copy_u16TimeMs != 0)
				{
					--Copy_u16TimeMs;
    123e:	61 50       	subi	r22, 0x01	; 1
    1240:	70 40       	sbci	r23, 0x00	; 0

					/* wait until overflow flag rises
					 * note that overflow takes 1 ms
					 */
					while((GPT_u8_TIFR_REG & 0X40) == 0)
    1242:	08 b6       	in	r0, 0x38	; 56
    1244:	06 fc       	sbrc	r0, 6
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <GPT_enuDelay_ms+0xcc>
					{
						asm("NOP");
    1248:	00 00       	nop
					--Copy_u16TimeMs;

					/* wait until overflow flag rises
					 * note that overflow takes 1 ms
					 */
					while((GPT_u8_TIFR_REG & 0X40) == 0)
    124a:	08 b6       	in	r0, 0x38	; 56
    124c:	06 fe       	sbrs	r0, 6
    124e:	fc cf       	rjmp	.-8      	; 0x1248 <GPT_enuDelay_ms+0xc4>
					{
						asm("NOP");
					}

					/* clear the ovwrflow flag */
					GPT_u8_TIFR_REG |= 0X40;
    1250:	88 b7       	in	r24, 0x38	; 56
    1252:	80 64       	ori	r24, 0x40	; 64
    1254:	88 bf       	out	0x38, r24	; 56

					/* load the preload value again */
					GPT_u8_TCNT2_REG = 131;
    1256:	94 bd       	out	0x24, r25	; 36
				/* set the Prescaler to 64 and start the timer */
				GPT_u8_TCCR2_REG &= ~(0x07);
				GPT_u8_TCCR2_REG |= GPT_u8_NO_PRESCALER_64;

				/* wait until the desired time in ms pass */
				while(Copy_u16TimeMs != 0)
    1258:	61 15       	cp	r22, r1
    125a:	71 05       	cpc	r23, r1
    125c:	81 f7       	brne	.-32     	; 0x123e <GPT_enuDelay_ms+0xba>
					/* load the preload value again */
					GPT_u8_TCNT2_REG = 131;
				}

				/* disable the timer */
				GPT_u8_TCCR2_REG &= ~(0X07);
    125e:	85 b5       	in	r24, 0x25	; 37
    1260:	88 7f       	andi	r24, 0xF8	; 248
    1262:	85 bd       	out	0x25, r24	; 37
	return Local_enuErrorStatus;
}

 GPT_tenuErrorStatus GPT_enuDelay_ms(u8 Copy_u8ChannelNumber, u16 Copy_u16TimeMs)
{
	GPT_tenuErrorStatus Loc_enuErrorStatus = GPT_OK;
    1264:	80 e0       	ldi	r24, 0x00	; 0
					GPT_u8_TCNT2_REG = 131;
				}

				/* disable the timer */
				GPT_u8_TCCR2_REG &= ~(0X07);
				break;
    1266:	08 95       	ret
{
	GPT_tenuErrorStatus Loc_enuErrorStatus = GPT_OK;

	if(Copy_u8ChannelNumber > GPT_u8_TIMER2)
	{
		Loc_enuErrorStatus = GPT_NOK;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	08 95       	ret
	return Local_enuErrorStatus;
}

 GPT_tenuErrorStatus GPT_enuDelay_ms(u8 Copy_u8ChannelNumber, u16 Copy_u16TimeMs)
{
	GPT_tenuErrorStatus Loc_enuErrorStatus = GPT_OK;
    126c:	80 e0       	ldi	r24, 0x00	; 0
				break;
		}
	}

	return Loc_enuErrorStatus;
}
    126e:	08 95       	ret

00001270 <GPT_enuStartTimer>:


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
    1270:	cf 92       	push	r12
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
       if(Copy_u8Timer >GPT_u8_TIMER2)
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	08 f0       	brcs	.+2      	; 0x1286 <GPT_enuStartTimer+0x16>
    1284:	7d c1       	rjmp	.+762    	; 0x1580 <GPT_enuStartTimer+0x310>
	   {
		   Local_enuErrorStatus = GPT_NOK;
	   }
	   else
	   { 
		   switch (Copy_u8Timer)
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	09 f4       	brne	.+2      	; 0x128c <GPT_enuStartTimer+0x1c>
    128a:	7e c0       	rjmp	.+252    	; 0x1388 <GPT_enuStartTimer+0x118>
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	20 f0       	brcs	.+8      	; 0x1298 <GPT_enuStartTimer+0x28>
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	09 f0       	breq	.+2      	; 0x1296 <GPT_enuStartTimer+0x26>
    1294:	77 c1       	rjmp	.+750    	; 0x1584 <GPT_enuStartTimer+0x314>
    1296:	fe c0       	rjmp	.+508    	; 0x1494 <GPT_enuStartTimer+0x224>
		     {
			   case GPT_u8_TIMER0 : 
			                  GPT_u8_TCCR0_REG |= Global_u8Prescaler_Timer0;
    1298:	93 b7       	in	r25, 0x33	; 51
    129a:	80 91 08 01 	lds	r24, 0x0108
    129e:	89 2b       	or	r24, r25
    12a0:	83 bf       	out	0x33, r24	; 51
							  if(Global_u8TIMER0_Mode == GPT_u8_NORMAL)
    12a2:	80 91 07 01 	lds	r24, 0x0107
    12a6:	88 23       	and	r24, r24
    12a8:	09 f0       	breq	.+2      	; 0x12ac <GPT_enuStartTimer+0x3c>
    12aa:	68 c0       	rjmp	.+208    	; 0x137c <GPT_enuStartTimer+0x10c>
							  { 
								    f32 Local_f32TickTime_ms =  (TIMER_PRESCALER_VALUES[Global_u8Prescaler_Timer0] * 1000/ F_CPU)  ;// Calculate tick time = Prescaler / F-cpu
								  Global_u16TIMER0_OVFCounter = (u16)(Copy_time_in_ms / Local_f32TickTime_ms / 256) ; // time of over flow = desired time / (tick time * 256 )= (desired time / tick time) / 256
    12ac:	cb 01       	movw	r24, r22
    12ae:	ba 01       	movw	r22, r20
    12b0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatunsisf>
    12b4:	6b 01       	movw	r12, r22
    12b6:	7c 01       	movw	r14, r24
		     {
			   case GPT_u8_TIMER0 : 
			                  GPT_u8_TCCR0_REG |= Global_u8Prescaler_Timer0;
							  if(Global_u8TIMER0_Mode == GPT_u8_NORMAL)
							  { 
								    f32 Local_f32TickTime_ms =  (TIMER_PRESCALER_VALUES[Global_u8Prescaler_Timer0] * 1000/ F_CPU)  ;// Calculate tick time = Prescaler / F-cpu
    12b8:	e0 91 08 01 	lds	r30, 0x0108
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	ed 53       	subi	r30, 0x3D	; 61
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	60 81       	ld	r22, Z
    12cc:	71 81       	ldd	r23, Z+1	; 0x01
    12ce:	82 81       	ldd	r24, Z+2	; 0x02
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	4a e7       	ldi	r20, 0x7A	; 122
    12d8:	54 e4       	ldi	r21, 0x44	; 68
    12da:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	58 e3       	ldi	r21, 0x38	; 56
    12e6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
								  Global_u16TIMER0_OVFCounter = (u16)(Copy_time_in_ms / Local_f32TickTime_ms / 256) ; // time of over flow = desired time / (tick time * 256 )= (desired time / tick time) / 256
    12ee:	c7 01       	movw	r24, r14
    12f0:	b6 01       	movw	r22, r12
    12f2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__divsf3>
    12f6:	c6 2f       	mov	r28, r22
    12f8:	d7 2f       	mov	r29, r23
    12fa:	18 2f       	mov	r17, r24
    12fc:	09 2f       	mov	r16, r25
    12fe:	86 2f       	mov	r24, r22
    1300:	9d 2f       	mov	r25, r29
    1302:	a1 2f       	mov	r26, r17
    1304:	b0 2f       	mov	r27, r16
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5b e3       	ldi	r21, 0x3B	; 59
    1312:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    1316:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	6c 01       	movw	r12, r24
    1320:	90 93 0f 01 	sts	0x010F, r25
    1324:	80 93 0e 01 	sts	0x010E, r24
								  Global_u8TIMER0_OVFPreload =(u8)(256- (( Copy_time_in_ms /Local_f32TickTime_ms ) -  ((u32)Global_u16TIMER0_OVFCounter * 256) ));
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	66 27       	eor	r22, r22
    132e:	78 2f       	mov	r23, r24
    1330:	89 2f       	mov	r24, r25
    1332:	9a 2f       	mov	r25, r26
    1334:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatunsisf>
    1338:	9b 01       	movw	r18, r22
    133a:	ac 01       	movw	r20, r24
    133c:	8c 2f       	mov	r24, r28
    133e:	9d 2f       	mov	r25, r29
    1340:	a1 2f       	mov	r26, r17
    1342:	b0 2f       	mov	r27, r16
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__subsf3>
    134c:	9b 01       	movw	r18, r22
    134e:	ac 01       	movw	r20, r24
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	80 e8       	ldi	r24, 0x80	; 128
    1356:	93 e4       	ldi	r25, 0x43	; 67
    1358:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__subsf3>
    135c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__fixunssfsi>
    1360:	60 93 10 01 	sts	0x0110, r22
								  // to calculate preload : [ desired time / (tick time * 256 ) ] - [desired time / (tick time * 256 ) ] : this suppose to give 0 but this will not happen
								  //because the first term we calculate it in the equation so the result will be for example 15.438
								  // but second term we store it in integer so it will give only 15 : 15.438-15= 0.438
								  // we have to multiply 0.438 by 256 then subtract the result from 256
								  if(Global_u8TIMER0_OVFPreload>0)
    1364:	66 23       	and	r22, r22
    1366:	39 f0       	breq	.+14     	; 0x1376 <GPT_enuStartTimer+0x106>
								  {
									  Global_u16TIMER0_OVFCounter++;
    1368:	08 94       	sec
    136a:	c1 1c       	adc	r12, r1
    136c:	d1 1c       	adc	r13, r1
    136e:	d0 92 0f 01 	sts	0x010F, r13
    1372:	c0 92 0e 01 	sts	0x010E, r12
								  }
								  GPT_u8_TCNT0_REG = Global_u8TIMER0_OVFPreload;
    1376:	62 bf       	out	0x32, r22	; 50
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	05 c1       	rjmp	.+522    	; 0x1586 <GPT_enuStartTimer+0x316>
								  }
								  GPT_u8_TCNT0_REG = Global_u8TIMER0_OVFPreload;
							  }
							  else
							  { 			
							     Timer_TickTime.Channel_0_TickTime =(u16) Copy_time_in_ms;
    137c:	50 93 12 01 	sts	0x0112, r21
    1380:	40 93 11 01 	sts	0x0111, r20
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	ff c0       	rjmp	.+510    	; 0x1586 <GPT_enuStartTimer+0x316>
							     Timer_TickTime.Channel_0_TickTime =(u16) Copy_time_in_ms;
							  }
							  break;
							  
			    case GPT_u8_TIMER1 :
			                   GPT_u8_TCCR1B |= Global_u8Prescaler_Timer1;
    1388:	9e b5       	in	r25, 0x2e	; 46
    138a:	80 91 0b 01 	lds	r24, 0x010B
    138e:	89 2b       	or	r24, r25
    1390:	8e bd       	out	0x2e, r24	; 46
							     if(Global_u8TIMER1_Mode == GPT_u8_NORMAL)
    1392:	80 91 09 01 	lds	r24, 0x0109
    1396:	88 23       	and	r24, r24
    1398:	09 f0       	breq	.+2      	; 0x139c <GPT_enuStartTimer+0x12c>
    139a:	6c c0       	rjmp	.+216    	; 0x1474 <GPT_enuStartTimer+0x204>
							     {
									  f32 Local_u32TickTime_ms =  (TIMER_PRESCALER_VALUES[Global_u8Prescaler_Timer1]* 1000.0/ F_CPU) ;
							          Global_u16TIMER1_OVFCounter = (u16)(Copy_time_in_ms /Local_u32TickTime_ms / 65536) ; // time of over flow = desired time / (tick time * 65536 )= (desired time / tick time) / 65536
    139c:	cb 01       	movw	r24, r22
    139e:	ba 01       	movw	r22, r20
    13a0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatunsisf>
    13a4:	6b 01       	movw	r12, r22
    13a6:	7c 01       	movw	r14, r24
							  
			    case GPT_u8_TIMER1 :
			                   GPT_u8_TCCR1B |= Global_u8Prescaler_Timer1;
							     if(Global_u8TIMER1_Mode == GPT_u8_NORMAL)
							     {
									  f32 Local_u32TickTime_ms =  (TIMER_PRESCALER_VALUES[Global_u8Prescaler_Timer1]* 1000.0/ F_CPU) ;
    13a8:	e0 91 0b 01 	lds	r30, 0x010B
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	ed 53       	subi	r30, 0x3D	; 61
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a e7       	ldi	r20, 0x7A	; 122
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	58 e3       	ldi	r21, 0x38	; 56
    13d6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    13da:	9b 01       	movw	r18, r22
    13dc:	ac 01       	movw	r20, r24
							          Global_u16TIMER1_OVFCounter = (u16)(Copy_time_in_ms /Local_u32TickTime_ms / 65536) ; // time of over flow = desired time / (tick time * 65536 )= (desired time / tick time) / 65536
    13de:	c7 01       	movw	r24, r14
    13e0:	b6 01       	movw	r22, r12
    13e2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__divsf3>
    13e6:	c6 2f       	mov	r28, r22
    13e8:	d7 2f       	mov	r29, r23
    13ea:	18 2f       	mov	r17, r24
    13ec:	09 2f       	mov	r16, r25
    13ee:	86 2f       	mov	r24, r22
    13f0:	9d 2f       	mov	r25, r29
    13f2:	a1 2f       	mov	r26, r17
    13f4:	b0 2f       	mov	r27, r16
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	57 e3       	ldi	r21, 0x37	; 55
    1402:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    1406:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	6c 01       	movw	r12, r24
    1410:	90 93 1a 01 	sts	0x011A, r25
    1414:	80 93 19 01 	sts	0x0119, r24
							          Global_u16TIMER1_OVFPreload =65536- (( Copy_time_in_ms /Local_u32TickTime_ms ) -  (Global_u16TIMER1_OVFCounter * 65536) );
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	77 27       	eor	r23, r23
    141e:	66 27       	eor	r22, r22
    1420:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__floatsisf>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	8c 2f       	mov	r24, r28
    142a:	9d 2f       	mov	r25, r29
    142c:	a1 2f       	mov	r26, r17
    142e:	b0 2f       	mov	r27, r16
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__subsf3>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	80 e8       	ldi	r24, 0x80	; 128
    1442:	97 e4       	ldi	r25, 0x47	; 71
    1444:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__subsf3>
    1448:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__fixunssfsi>
    144c:	ab 01       	movw	r20, r22
    144e:	bc 01       	movw	r22, r24
    1450:	ca 01       	movw	r24, r20
    1452:	50 93 1c 01 	sts	0x011C, r21
    1456:	40 93 1b 01 	sts	0x011B, r20
							          // to calculate preload : [ desired time / (tick time * 65536 ) ] - [desired time / (tick time * 65536 ) ] : this suppose to give 0 but this will not happen
							          //because the first term we calculate it in the equation so the result will be for example 15.438
							          // but second term we store it in integer so it will give only 15 : 15.438-15= 0.438
							          // we have to multiply 0.438 by 256 then subtract the result from 256
							          if(Global_u16TIMER1_OVFPreload>0)
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	39 f0       	breq	.+14     	; 0x146c <GPT_enuStartTimer+0x1fc>
							          {
							            Global_u16TIMER1_OVFCounter++;
    145e:	08 94       	sec
    1460:	c1 1c       	adc	r12, r1
    1462:	d1 1c       	adc	r13, r1
    1464:	d0 92 1a 01 	sts	0x011A, r13
    1468:	c0 92 19 01 	sts	0x0119, r12
							          }
							          GPT_u16_TCNT1L = Global_u16TIMER1_OVFPreload;
    146c:	9d bd       	out	0x2d, r25	; 45
    146e:	8c bd       	out	0x2c, r24	; 44
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	89 c0       	rjmp	.+274    	; 0x1586 <GPT_enuStartTimer+0x316>
							          }
							          GPT_u16_TCNT1L = Global_u16TIMER1_OVFPreload;
							     }
							   else
						        {
									if(Global_u8DesiredPin == GPT_u8_OC1A)
    1474:	80 91 0a 01 	lds	r24, 0x010A
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	31 f4       	brne	.+12     	; 0x1488 <GPT_enuStartTimer+0x218>
								     { Timer_TickTime.Channel_1_TickTime_OC1A = (u16)Copy_time_in_ms;}
    147c:	50 93 14 01 	sts	0x0114, r21
    1480:	40 93 13 01 	sts	0x0113, r20
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	7f c0       	rjmp	.+254    	; 0x1586 <GPT_enuStartTimer+0x316>
							   else
						        {
									if(Global_u8DesiredPin == GPT_u8_OC1A)
								     { Timer_TickTime.Channel_1_TickTime_OC1A = (u16)Copy_time_in_ms;}
	    					         else
  								     {Timer_TickTime.Channel_1_TickTime_OC1B =(u16)Copy_time_in_ms;}
    1488:	50 93 16 01 	sts	0x0116, r21
    148c:	40 93 15 01 	sts	0x0115, r20
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	79 c0       	rjmp	.+242    	; 0x1586 <GPT_enuStartTimer+0x316>
  								     {Timer_TickTime.Channel_1_TickTime_OC1B =(u16)Copy_time_in_ms;}
							     }										   
			                    break;
							   
				 case GPT_u8_TIMER2 :
				               GPT_u8_TCCR2_REG |= Global_u8Prescaler_Timer2;
    1494:	95 b5       	in	r25, 0x25	; 37
    1496:	80 91 0d 01 	lds	r24, 0x010D
    149a:	89 2b       	or	r24, r25
    149c:	85 bd       	out	0x25, r24	; 37
							   if(Global_u8TIMER2_Mode == GPT_u8_NORMAL)
    149e:	80 91 0c 01 	lds	r24, 0x010C
    14a2:	88 23       	and	r24, r24
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <GPT_enuStartTimer+0x238>
    14a6:	66 c0       	rjmp	.+204    	; 0x1574 <GPT_enuStartTimer+0x304>
							   {
								    f32 Local_u32TickTime_ms =  (TIMER2_PRESCALER_VALUES[Global_u8Prescaler_Timer2]* 1000.0/ F_CPU) ;
								   Global_u16TIMER2_OVFCounter = (u16)(Copy_time_in_ms /Local_u32TickTime_ms / 256) ; // time of over flow = desired time / (tick time * 256 )= (desired time / tick time) / 256
    14a8:	cb 01       	movw	r24, r22
    14aa:	ba 01       	movw	r22, r20
    14ac:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatunsisf>
    14b0:	6b 01       	movw	r12, r22
    14b2:	7c 01       	movw	r14, r24
							   
				 case GPT_u8_TIMER2 :
				               GPT_u8_TCCR2_REG |= Global_u8Prescaler_Timer2;
							   if(Global_u8TIMER2_Mode == GPT_u8_NORMAL)
							   {
								    f32 Local_u32TickTime_ms =  (TIMER2_PRESCALER_VALUES[Global_u8Prescaler_Timer2]* 1000.0/ F_CPU) ;
    14b4:	e0 91 0d 01 	lds	r30, 0x010D
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	e5 52       	subi	r30, 0x25	; 37
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	4a e7       	ldi	r20, 0x7A	; 122
    14d4:	54 e4       	ldi	r21, 0x44	; 68
    14d6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	58 e3       	ldi	r21, 0x38	; 56
    14e2:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
								   Global_u16TIMER2_OVFCounter = (u16)(Copy_time_in_ms /Local_u32TickTime_ms / 256) ; // time of over flow = desired time / (tick time * 256 )= (desired time / tick time) / 256
    14ea:	c7 01       	movw	r24, r14
    14ec:	b6 01       	movw	r22, r12
    14ee:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__divsf3>
    14f2:	c6 2f       	mov	r28, r22
    14f4:	d7 2f       	mov	r29, r23
    14f6:	18 2f       	mov	r17, r24
    14f8:	09 2f       	mov	r16, r25
    14fa:	86 2f       	mov	r24, r22
    14fc:	9d 2f       	mov	r25, r29
    14fe:	a1 2f       	mov	r26, r17
    1500:	b0 2f       	mov	r27, r16
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5b e3       	ldi	r21, 0x3B	; 59
    150e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__mulsf3>
    1512:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	6c 01       	movw	r12, r24
    151c:	90 93 1e 01 	sts	0x011E, r25
    1520:	80 93 1d 01 	sts	0x011D, r24
								   Global_u8TIMER2_OVFPreload =256- (( Copy_time_in_ms /Local_u32TickTime_ms ) -  (Global_u16TIMER2_OVFCounter * 256) );
    1524:	78 2f       	mov	r23, r24
    1526:	66 27       	eor	r22, r22
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatunsisf>
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	8c 2f       	mov	r24, r28
    1536:	9d 2f       	mov	r25, r29
    1538:	a1 2f       	mov	r26, r17
    153a:	b0 2f       	mov	r27, r16
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__subsf3>
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	93 e4       	ldi	r25, 0x43	; 67
    1550:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__subsf3>
    1554:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__fixunssfsi>
    1558:	60 93 1f 01 	sts	0x011F, r22
								   // to calculate preload : [ desired time / (tick time * 256 ) ] - [desired time / (tick time * 256 ) ] : this suppose to give 0 but this will not happen
								   //because the first term we calculate it in the equation so the result will be for example 15.438
								   // but second term we store it in integer so it will give only 15 : 15.438-15= 0.438
								   // we have to multiply 0.438 by 256 then subtract the result from 256
								   if(Global_u8TIMER2_OVFPreload>0)
    155c:	66 23       	and	r22, r22
    155e:	39 f0       	breq	.+14     	; 0x156e <GPT_enuStartTimer+0x2fe>
								   {
									   Global_u16TIMER2_OVFCounter++;
    1560:	08 94       	sec
    1562:	c1 1c       	adc	r12, r1
    1564:	d1 1c       	adc	r13, r1
    1566:	d0 92 1e 01 	sts	0x011E, r13
    156a:	c0 92 1d 01 	sts	0x011D, r12
								   }
								   GPT_u8_TCNT2_REG = Global_u8TIMER2_OVFPreload;
    156e:	64 bd       	out	0x24, r22	; 36
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <GPT_enuStartTimer+0x316>
								   }
								   GPT_u8_TCNT2_REG = Global_u8TIMER2_OVFPreload;
							   }
							   else
							     { 
									 Timer_TickTime.Channel_2_TickTime = (u16)Copy_time_in_ms;
    1574:	50 93 18 01 	sts	0x0118, r21
    1578:	40 93 17 01 	sts	0x0117, r20
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <GPT_enuStartTimer+0x316>
       if(Copy_u8Timer >GPT_u8_TIMER2)
	   {
		   Local_enuErrorStatus = GPT_NOK;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <GPT_enuStartTimer+0x316>
}


GPT_tenuErrorStatus GPT_enuStartTimer(u8 Copy_u8Timer,u32 Copy_time_in_ms) // Hint: make sure to check above if the frequency is F-CPU or Crystal which 32768
{
	   GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1584:	80 e0       	ldi	r24, 0x00	; 0
		     }
		    
	   }
	  
	return Local_enuErrorStatus;
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	08 95       	ret

00001598 <GPT_enuStopTimer>:

GPT_tenuErrorStatus GPT_enuStopTimer(u8 Copy_u8Timer)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;

    if(Copy_u8Timer > GPT_u8_TIMER2)
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	d0 f4       	brcc	.+52     	; 0x15d0 <GPT_enuStopTimer+0x38>
     {
 	    Local_enuErrorStatus = GPT_NOK;
     }
    else
       {  // clear Prescaler 
	        switch(Copy_u8Timer)
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	59 f0       	breq	.+22     	; 0x15b6 <GPT_enuStopTimer+0x1e>
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <GPT_enuStopTimer+0x12>
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	b1 f4       	brne	.+44     	; 0x15d4 <GPT_enuStopTimer+0x3c>
    15a8:	0d c0       	rjmp	.+26     	; 0x15c4 <GPT_enuStopTimer+0x2c>
	           {
                	case GPT_u8_TIMER0:
                 	/* clear the clock source to disable the timer */
					 
                	GPT_u8_TCCR0_REG &= ~(0x07);
    15aa:	83 b7       	in	r24, 0x33	; 51
    15ac:	88 7f       	andi	r24, 0xF8	; 248
    15ae:	83 bf       	out	0x33, r24	; 51
					GPT_u8_TCNT0_REG = 0;
    15b0:	12 be       	out	0x32, r1	; 50
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuStopTimer(u8 Copy_u8Timer)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
                	case GPT_u8_TIMER0:
                 	/* clear the clock source to disable the timer */
					 
                	GPT_u8_TCCR0_REG &= ~(0x07);
					GPT_u8_TCNT0_REG = 0;
                	break;
    15b4:	08 95       	ret
                
                	case GPT_u8_TIMER1:
                	/* clear the clock source to disable the timer */
                	  GPT_u8_TCCR1B &= ~(0x07);
    15b6:	8e b5       	in	r24, 0x2e	; 46
    15b8:	88 7f       	andi	r24, 0xF8	; 248
    15ba:	8e bd       	out	0x2e, r24	; 46
					  GPT_u16_TCNT1L = 0;
    15bc:	1d bc       	out	0x2d, r1	; 45
    15be:	1c bc       	out	0x2c, r1	; 44
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuStopTimer(u8 Copy_u8Timer)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    15c0:	80 e0       	ldi	r24, 0x00	; 0
                	case GPT_u8_TIMER1:
                	/* clear the clock source to disable the timer */
                	  GPT_u8_TCCR1B &= ~(0x07);
					  GPT_u16_TCNT1L = 0;
					  
                	break;
    15c2:	08 95       	ret
                
                	case GPT_u8_TIMER2:
                	/* clear the clock source to disable the timer */
                	GPT_u8_TCCR2_REG &= ~(0x07);
    15c4:	85 b5       	in	r24, 0x25	; 37
    15c6:	88 7f       	andi	r24, 0xF8	; 248
    15c8:	85 bd       	out	0x25, r24	; 37
					GPT_u8_TCNT2_REG = 0;
    15ca:	14 bc       	out	0x24, r1	; 36
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuStopTimer(u8 Copy_u8Timer)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
                
                	case GPT_u8_TIMER2:
                	/* clear the clock source to disable the timer */
                	GPT_u8_TCCR2_REG &= ~(0x07);
					GPT_u8_TCNT2_REG = 0;
		            break;
    15ce:	08 95       	ret
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;

    if(Copy_u8Timer > GPT_u8_TIMER2)
     {
 	    Local_enuErrorStatus = GPT_NOK;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	08 95       	ret
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuStopTimer(u8 Copy_u8Timer)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
					GPT_u8_TCNT2_REG = 0;
		            break;
	         }
      } 
		return Local_enuErrorStatus;
}
    15d6:	08 95       	ret

000015d8 <GPT_enuRegisterCBF>:

GPT_tenuErrorStatus GPT_enuRegisterCBF(u8 Copy_u8Timer,func_ptr Add_pfuncCBF)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
	 if(Copy_u8Timer > GPT_u8_TIMER2 || Add_pfuncCBF == NULL)
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	70 f5       	brcc	.+92     	; 0x1638 <GPT_enuRegisterCBF+0x60>
    15dc:	61 15       	cp	r22, r1
    15de:	71 05       	cpc	r23, r1
    15e0:	69 f1       	breq	.+90     	; 0x163c <GPT_enuRegisterCBF+0x64>
		 {
			 Local_enuErrorStatus = GPT_NOK;
		 }
	 else
	 {
		 switch(Copy_u8Timer)
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	59 f0       	breq	.+22     	; 0x15fc <GPT_enuRegisterCBF+0x24>
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	18 f0       	brcs	.+6      	; 0x15f0 <GPT_enuRegisterCBF+0x18>
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	49 f5       	brne	.+82     	; 0x1640 <GPT_enuRegisterCBF+0x68>
    15ee:	1e c0       	rjmp	.+60     	; 0x162c <GPT_enuRegisterCBF+0x54>
		 {

		       case GPT_u8_TIMER0:
		  		                    GPT_strISR.GPT_pfunTIMER0=Add_pfuncCBF;
    15f0:	70 93 3f 01 	sts	0x013F, r23
    15f4:	60 93 3e 01 	sts	0x013E, r22
		return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF(u8 Copy_u8Timer,func_ptr Add_pfuncCBF)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    15f8:	80 e0       	ldi	r24, 0x00	; 0
		 switch(Copy_u8Timer)
		 {

		       case GPT_u8_TIMER0:
		  		                    GPT_strISR.GPT_pfunTIMER0=Add_pfuncCBF;
		  		                    break;
    15fa:	08 95       	ret
		       case GPT_u8_TIMER1:
			                       if (Global_u8TIMER1_Mode == GPT_u8_NORMAL)  // if mode was over flow , force desired pin to be oc1A because ISR of over flow takes GPT_strISR.GPT_pfunTIMER1_OC1A as a call back function
    15fc:	80 91 09 01 	lds	r24, 0x0109
    1600:	88 23       	and	r24, r24
    1602:	21 f4       	brne	.+8      	; 0x160c <GPT_enuRegisterCBF+0x34>
								         Global_u8DesiredPin = GPT_u8_OC1A;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	80 93 0a 01 	sts	0x010A, r24
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <GPT_enuRegisterCBF+0x3c>
										 
			                      if(Global_u8DesiredPin == GPT_u8_OC1A )
    160c:	80 91 0a 01 	lds	r24, 0x010A
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	31 f4       	brne	.+12     	; 0x1620 <GPT_enuRegisterCBF+0x48>
										 GPT_strISR.GPT_pfunTIMER1_OC1A=Add_pfuncCBF;
    1614:	70 93 41 01 	sts	0x0141, r23
    1618:	60 93 40 01 	sts	0x0140, r22
		return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF(u8 Copy_u8Timer,func_ptr Add_pfuncCBF)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	08 95       	ret
								         Global_u8DesiredPin = GPT_u8_OC1A;
										 
			                      if(Global_u8DesiredPin == GPT_u8_OC1A )
										 GPT_strISR.GPT_pfunTIMER1_OC1A=Add_pfuncCBF;
						     	  else 
								      	 GPT_strISR.GPT_pfunTIMER1_OC1B=Add_pfuncCBF;
    1620:	70 93 43 01 	sts	0x0143, r23
    1624:	60 93 42 01 	sts	0x0142, r22
		return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF(u8 Copy_u8Timer,func_ptr Add_pfuncCBF)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	08 95       	ret
										 GPT_strISR.GPT_pfunTIMER1_OC1A=Add_pfuncCBF;
						     	  else 
								      	 GPT_strISR.GPT_pfunTIMER1_OC1B=Add_pfuncCBF;
		    		  		      break;
		       case GPT_u8_TIMER2:
		    		  		        GPT_strISR.GPT_pfunTIMER2=Add_pfuncCBF;
    162c:	70 93 45 01 	sts	0x0145, r23
    1630:	60 93 44 01 	sts	0x0144, r22
		return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF(u8 Copy_u8Timer,func_ptr Add_pfuncCBF)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1634:	80 e0       	ldi	r24, 0x00	; 0
						     	  else 
								      	 GPT_strISR.GPT_pfunTIMER1_OC1B=Add_pfuncCBF;
		    		  		      break;
		       case GPT_u8_TIMER2:
		    		  		        GPT_strISR.GPT_pfunTIMER2=Add_pfuncCBF;
		    		  		         break;
    1636:	08 95       	ret
GPT_tenuErrorStatus GPT_enuRegisterCBF(u8 Copy_u8Timer,func_ptr Add_pfuncCBF)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
	 if(Copy_u8Timer > GPT_u8_TIMER2 || Add_pfuncCBF == NULL)
		 {
			 Local_enuErrorStatus = GPT_NOK;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	08 95       	ret
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	08 95       	ret
		return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF(u8 Copy_u8Timer,func_ptr Add_pfuncCBF)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1640:	80 e0       	ldi	r24, 0x00	; 0
		    		  		        GPT_strISR.GPT_pfunTIMER2=Add_pfuncCBF;
		    		  		         break;
		 }
	 }
		return Local_enuErrorStatus;
}
    1642:	08 95       	ret

00001644 <GPT_enuStartTimer_MultiTimes>:

//******************************************************** Function Overloading ******************************************************
GPT_tenuErrorStatus GPT_enuStartTimer_MultiTimes(u8 Copy_u8Timer,u32 Copy_time1_in_ms,u32 Copy_time2_in_ms,u32 Copy_time3_in_ms)
{
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
	if(Copy_u8Timer >GPT_u8_TIMER2)
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	08 f0       	brcs	.+2      	; 0x1656 <GPT_enuStartTimer_MultiTimes+0x12>
    1654:	42 c0       	rjmp	.+132    	; 0x16da <GPT_enuStartTimer_MultiTimes+0x96>
	{
		Local_enuErrorStatus = GPT_NOK;
	}
	else
	{
		switch (Copy_u8Timer)
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	c1 f0       	breq	.+48     	; 0x168a <GPT_enuStartTimer_MultiTimes+0x46>
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	18 f0       	brcs	.+6      	; 0x1664 <GPT_enuStartTimer_MultiTimes+0x20>
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	f1 f5       	brne	.+124    	; 0x16de <GPT_enuStartTimer_MultiTimes+0x9a>
    1662:	28 c0       	rjmp	.+80     	; 0x16b4 <GPT_enuStartTimer_MultiTimes+0x70>
		{
			case GPT_u8_TIMER0 :
			GPT_u8_TCCR0_REG |= Global_u8Prescaler_Timer0;
    1664:	93 b7       	in	r25, 0x33	; 51
    1666:	80 91 08 01 	lds	r24, 0x0108
    166a:	89 2b       	or	r24, r25
    166c:	83 bf       	out	0x33, r24	; 51
			Timer_TickTime.Channel_0_TickTime =(u16) Copy_time1_in_ms;
    166e:	50 93 12 01 	sts	0x0112, r21
    1672:	40 93 11 01 	sts	0x0111, r20
			Channel_0_TickTime1 =(u16) Copy_time2_in_ms;
    1676:	10 93 21 01 	sts	0x0121, r17
    167a:	00 93 20 01 	sts	0x0120, r16
			Channel_0_TickTime2 =(u16) Copy_time3_in_ms;
    167e:	d0 92 23 01 	sts	0x0123, r13
    1682:	c0 92 22 01 	sts	0x0122, r12
}

//******************************************************** Function Overloading ******************************************************
GPT_tenuErrorStatus GPT_enuStartTimer_MultiTimes(u8 Copy_u8Timer,u32 Copy_time1_in_ms,u32 Copy_time2_in_ms,u32 Copy_time3_in_ms)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1686:	80 e0       	ldi	r24, 0x00	; 0
			case GPT_u8_TIMER0 :
			GPT_u8_TCCR0_REG |= Global_u8Prescaler_Timer0;
			Timer_TickTime.Channel_0_TickTime =(u16) Copy_time1_in_ms;
			Channel_0_TickTime1 =(u16) Copy_time2_in_ms;
			Channel_0_TickTime2 =(u16) Copy_time3_in_ms;
			break;
    1688:	2b c0       	rjmp	.+86     	; 0x16e0 <GPT_enuStartTimer_MultiTimes+0x9c>
			
			case GPT_u8_TIMER1 :
			GPT_u8_TCCR1B |= Global_u8Prescaler_Timer1;
    168a:	9e b5       	in	r25, 0x2e	; 46
    168c:	80 91 0b 01 	lds	r24, 0x010B
    1690:	89 2b       	or	r24, r25
    1692:	8e bd       	out	0x2e, r24	; 46
			if(Global_u8DesiredPin == GPT_u8_OC1A)
    1694:	80 91 0a 01 	lds	r24, 0x010A
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	31 f4       	brne	.+12     	; 0x16a8 <GPT_enuStartTimer_MultiTimes+0x64>
		{ Timer_TickTime.Channel_1_TickTime_OC1A = (u16)Copy_time1_in_ms;}
    169c:	50 93 14 01 	sts	0x0114, r21
    16a0:	40 93 13 01 	sts	0x0113, r20
}

//******************************************************** Function Overloading ******************************************************
GPT_tenuErrorStatus GPT_enuStartTimer_MultiTimes(u8 Copy_u8Timer,u32 Copy_time1_in_ms,u32 Copy_time2_in_ms,u32 Copy_time3_in_ms)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	1c c0       	rjmp	.+56     	; 0x16e0 <GPT_enuStartTimer_MultiTimes+0x9c>
			case GPT_u8_TIMER1 :
			GPT_u8_TCCR1B |= Global_u8Prescaler_Timer1;
			if(Global_u8DesiredPin == GPT_u8_OC1A)
		{ Timer_TickTime.Channel_1_TickTime_OC1A = (u16)Copy_time1_in_ms;}
			else
		{Timer_TickTime.Channel_1_TickTime_OC1B =(u16)Copy_time1_in_ms;}
    16a8:	50 93 16 01 	sts	0x0116, r21
    16ac:	40 93 15 01 	sts	0x0115, r20
}

//******************************************************** Function Overloading ******************************************************
GPT_tenuErrorStatus GPT_enuStartTimer_MultiTimes(u8 Copy_u8Timer,u32 Copy_time1_in_ms,u32 Copy_time2_in_ms,u32 Copy_time3_in_ms)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	16 c0       	rjmp	.+44     	; 0x16e0 <GPT_enuStartTimer_MultiTimes+0x9c>
			else
		{Timer_TickTime.Channel_1_TickTime_OC1B =(u16)Copy_time1_in_ms;}
			break;
			
			case GPT_u8_TIMER2 :
			GPT_u8_TCCR2_REG |= Global_u8Prescaler_Timer2;
    16b4:	95 b5       	in	r25, 0x25	; 37
    16b6:	80 91 0d 01 	lds	r24, 0x010D
    16ba:	89 2b       	or	r24, r25
    16bc:	85 bd       	out	0x25, r24	; 37
			Timer_TickTime.Channel_2_TickTime = (u16)Copy_time1_in_ms;
    16be:	50 93 18 01 	sts	0x0118, r21
    16c2:	40 93 17 01 	sts	0x0117, r20
			Channel_2_TickTime1 = (u16) Copy_time2_in_ms;
    16c6:	10 93 25 01 	sts	0x0125, r17
    16ca:	00 93 24 01 	sts	0x0124, r16
			Channel_2_TickTime2 =(u16) Copy_time3_in_ms;
    16ce:	d0 92 27 01 	sts	0x0127, r13
    16d2:	c0 92 26 01 	sts	0x0126, r12
}

//******************************************************** Function Overloading ******************************************************
GPT_tenuErrorStatus GPT_enuStartTimer_MultiTimes(u8 Copy_u8Timer,u32 Copy_time1_in_ms,u32 Copy_time2_in_ms,u32 Copy_time3_in_ms)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
			case GPT_u8_TIMER2 :
			GPT_u8_TCCR2_REG |= Global_u8Prescaler_Timer2;
			Timer_TickTime.Channel_2_TickTime = (u16)Copy_time1_in_ms;
			Channel_2_TickTime1 = (u16) Copy_time2_in_ms;
			Channel_2_TickTime2 =(u16) Copy_time3_in_ms;
			break;
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <GPT_enuStartTimer_MultiTimes+0x9c>
GPT_tenuErrorStatus GPT_enuStartTimer_MultiTimes(u8 Copy_u8Timer,u32 Copy_time1_in_ms,u32 Copy_time2_in_ms,u32 Copy_time3_in_ms)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
	if(Copy_u8Timer >GPT_u8_TIMER2)
	{
		Local_enuErrorStatus = GPT_NOK;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <GPT_enuStartTimer_MultiTimes+0x9c>
}

//******************************************************** Function Overloading ******************************************************
GPT_tenuErrorStatus GPT_enuStartTimer_MultiTimes(u8 Copy_u8Timer,u32 Copy_time1_in_ms,u32 Copy_time2_in_ms,u32 Copy_time3_in_ms)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    16de:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	
	return Local_enuErrorStatus;
}
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	08 95       	ret

000016ee <GPT_enuRegisterCBF_MultiTimes>:

GPT_tenuErrorStatus GPT_enuRegisterCBF_MultiTimes(u8 Copy_u8Timer,func_ptr Add_pfuncCBF1,func_ptr Add_pfuncCBF2,func_ptr Add_pfuncCBF3)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
	if(Copy_u8Timer > GPT_u8_TIMER2 || Add_pfuncCBF1 == NULL || Add_pfuncCBF2 == NULL)
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	c8 f5       	brcc	.+114    	; 0x1764 <GPT_enuRegisterCBF_MultiTimes+0x76>
    16f2:	61 15       	cp	r22, r1
    16f4:	71 05       	cpc	r23, r1
    16f6:	c1 f1       	breq	.+112    	; 0x1768 <GPT_enuRegisterCBF_MultiTimes+0x7a>
    16f8:	41 15       	cp	r20, r1
    16fa:	51 05       	cpc	r21, r1
    16fc:	b9 f1       	breq	.+110    	; 0x176c <GPT_enuRegisterCBF_MultiTimes+0x7e>
	{
		Local_enuErrorStatus = GPT_NOK;
	}
	else
	{
		switch(Copy_u8Timer)
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	99 f0       	breq	.+38     	; 0x1728 <GPT_enuRegisterCBF_MultiTimes+0x3a>
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	18 f0       	brcs	.+6      	; 0x170c <GPT_enuRegisterCBF_MultiTimes+0x1e>
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	99 f5       	brne	.+102    	; 0x1770 <GPT_enuRegisterCBF_MultiTimes+0x82>
    170a:	1e c0       	rjmp	.+60     	; 0x1748 <GPT_enuRegisterCBF_MultiTimes+0x5a>
		{

			case GPT_u8_TIMER0:
			GPT_strISR.GPT_pfunTIMER0=Add_pfuncCBF1;
    170c:	70 93 3f 01 	sts	0x013F, r23
    1710:	60 93 3e 01 	sts	0x013E, r22
			 GPT_pfunTIMER0_1=Add_pfuncCBF2;
    1714:	50 93 06 01 	sts	0x0106, r21
    1718:	40 93 05 01 	sts	0x0105, r20
			 GPT_pfunTIMER0_2=Add_pfuncCBF3;
    171c:	30 93 04 01 	sts	0x0104, r19
    1720:	20 93 03 01 	sts	0x0103, r18
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF_MultiTimes(u8 Copy_u8Timer,func_ptr Add_pfuncCBF1,func_ptr Add_pfuncCBF2,func_ptr Add_pfuncCBF3)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1724:	80 e0       	ldi	r24, 0x00	; 0

			case GPT_u8_TIMER0:
			GPT_strISR.GPT_pfunTIMER0=Add_pfuncCBF1;
			 GPT_pfunTIMER0_1=Add_pfuncCBF2;
			 GPT_pfunTIMER0_2=Add_pfuncCBF3;
			break;
    1726:	08 95       	ret
			case GPT_u8_TIMER1:
			
			if(Global_u8DesiredPin == GPT_u8_OC1A)
    1728:	80 91 0a 01 	lds	r24, 0x010A
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	31 f4       	brne	.+12     	; 0x173c <GPT_enuRegisterCBF_MultiTimes+0x4e>
			GPT_strISR.GPT_pfunTIMER1_OC1A=Add_pfuncCBF1;
    1730:	70 93 41 01 	sts	0x0141, r23
    1734:	60 93 40 01 	sts	0x0140, r22
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF_MultiTimes(u8 Copy_u8Timer,func_ptr Add_pfuncCBF1,func_ptr Add_pfuncCBF2,func_ptr Add_pfuncCBF3)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
			case GPT_u8_TIMER1:
			
			if(Global_u8DesiredPin == GPT_u8_OC1A)
			GPT_strISR.GPT_pfunTIMER1_OC1A=Add_pfuncCBF1;
			else
			GPT_strISR.GPT_pfunTIMER1_OC1B=Add_pfuncCBF1;
    173c:	70 93 43 01 	sts	0x0143, r23
    1740:	60 93 42 01 	sts	0x0142, r22
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF_MultiTimes(u8 Copy_u8Timer,func_ptr Add_pfuncCBF1,func_ptr Add_pfuncCBF2,func_ptr Add_pfuncCBF3)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	08 95       	ret
			GPT_strISR.GPT_pfunTIMER1_OC1A=Add_pfuncCBF1;
			else
			GPT_strISR.GPT_pfunTIMER1_OC1B=Add_pfuncCBF1;
			break;
			case GPT_u8_TIMER2:
			GPT_strISR.GPT_pfunTIMER2=Add_pfuncCBF1;
    1748:	70 93 45 01 	sts	0x0145, r23
    174c:	60 93 44 01 	sts	0x0144, r22
			GPT_pfunTIMER2_1 =Add_pfuncCBF2;
    1750:	50 93 02 01 	sts	0x0102, r21
    1754:	40 93 01 01 	sts	0x0101, r20
			GPT_pfunTIMER2_2 =Add_pfuncCBF3;
    1758:	30 93 00 01 	sts	0x0100, r19
    175c:	20 93 ff 00 	sts	0x00FF, r18
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF_MultiTimes(u8 Copy_u8Timer,func_ptr Add_pfuncCBF1,func_ptr Add_pfuncCBF2,func_ptr Add_pfuncCBF3)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1760:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case GPT_u8_TIMER2:
			GPT_strISR.GPT_pfunTIMER2=Add_pfuncCBF1;
			GPT_pfunTIMER2_1 =Add_pfuncCBF2;
			GPT_pfunTIMER2_2 =Add_pfuncCBF3;
			break;
    1762:	08 95       	ret
GPT_tenuErrorStatus GPT_enuRegisterCBF_MultiTimes(u8 Copy_u8Timer,func_ptr Add_pfuncCBF1,func_ptr Add_pfuncCBF2,func_ptr Add_pfuncCBF3)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
	if(Copy_u8Timer > GPT_u8_TIMER2 || Add_pfuncCBF1 == NULL || Add_pfuncCBF2 == NULL)
	{
		Local_enuErrorStatus = GPT_NOK;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	08 95       	ret
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	08 95       	ret
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	08 95       	ret
	return Local_enuErrorStatus;
}

GPT_tenuErrorStatus GPT_enuRegisterCBF_MultiTimes(u8 Copy_u8Timer,func_ptr Add_pfuncCBF1,func_ptr Add_pfuncCBF2,func_ptr Add_pfuncCBF3)
{
	GPT_tenuErrorStatus Local_enuErrorStatus= GPT_OK;
    1770:	80 e0       	ldi	r24, 0x00	; 0
			GPT_pfunTIMER2_2 =Add_pfuncCBF3;
			break;
		}
	}
	return Local_enuErrorStatus;
}
    1772:	08 95       	ret

00001774 <__vector_10>:

//*********************************************************************************************** Compare Match ISR *******************************************************************************************
// ISR for Timer 0 COMP //
void __vector_10(void)     __attribute__((signal,used));
void __vector_10(void)    // if Prescaler = 1024 and desired time = 10 ms so OCR0 has to be 77 
{
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
	static u16 Loc_u16TickTime=0;
	static u16 Loc_u16TickTime1=0;
	static u16 Loc_u16TickTime2=0;
	Loc_u16TickTime++;
    1796:	80 91 28 01 	lds	r24, 0x0128
    179a:	90 91 29 01 	lds	r25, 0x0129
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	90 93 29 01 	sts	0x0129, r25
    17a4:	80 93 28 01 	sts	0x0128, r24
	Loc_u16TickTime1++;
    17a8:	20 91 2a 01 	lds	r18, 0x012A
    17ac:	30 91 2b 01 	lds	r19, 0x012B
    17b0:	2f 5f       	subi	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	30 93 2b 01 	sts	0x012B, r19
    17b8:	20 93 2a 01 	sts	0x012A, r18
	Loc_u16TickTime2++;
    17bc:	20 91 2c 01 	lds	r18, 0x012C
    17c0:	30 91 2d 01 	lds	r19, 0x012D
    17c4:	2f 5f       	subi	r18, 0xFF	; 255
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	30 93 2d 01 	sts	0x012D, r19
    17cc:	20 93 2c 01 	sts	0x012C, r18
	if(GPT_strISR.GPT_pfunTIMER0 != NULL)
    17d0:	20 91 3e 01 	lds	r18, 0x013E
    17d4:	30 91 3f 01 	lds	r19, 0x013F
    17d8:	21 15       	cp	r18, r1
    17da:	31 05       	cpc	r19, r1
    17dc:	81 f0       	breq	.+32     	; 0x17fe <__vector_10+0x8a>
	{
            if(Loc_u16TickTime == Timer_TickTime.Channel_0_TickTime)
    17de:	20 91 11 01 	lds	r18, 0x0111
    17e2:	30 91 12 01 	lds	r19, 0x0112
    17e6:	82 17       	cp	r24, r18
    17e8:	93 07       	cpc	r25, r19
    17ea:	49 f4       	brne	.+18     	; 0x17fe <__vector_10+0x8a>
                 {
	                Loc_u16TickTime = 0;
    17ec:	10 92 29 01 	sts	0x0129, r1
    17f0:	10 92 28 01 	sts	0x0128, r1
  	                GPT_strISR.GPT_pfunTIMER0();
    17f4:	e0 91 3e 01 	lds	r30, 0x013E
    17f8:	f0 91 3f 01 	lds	r31, 0x013F
    17fc:	09 95       	icall
                 }
	}	  
	 if(GPT_pfunTIMER0_1 != NULL)
    17fe:	80 91 05 01 	lds	r24, 0x0105
    1802:	90 91 06 01 	lds	r25, 0x0106
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	a1 f0       	breq	.+40     	; 0x1832 <__vector_10+0xbe>
	 {
	       if(Loc_u16TickTime1 ==Channel_0_TickTime1 )
    180a:	20 91 2a 01 	lds	r18, 0x012A
    180e:	30 91 2b 01 	lds	r19, 0x012B
    1812:	80 91 20 01 	lds	r24, 0x0120
    1816:	90 91 21 01 	lds	r25, 0x0121
    181a:	28 17       	cp	r18, r24
    181c:	39 07       	cpc	r19, r25
    181e:	49 f4       	brne	.+18     	; 0x1832 <__vector_10+0xbe>
	           {
	          	Loc_u16TickTime1=0;
    1820:	10 92 2b 01 	sts	0x012B, r1
    1824:	10 92 2a 01 	sts	0x012A, r1
		          GPT_pfunTIMER0_1();
    1828:	e0 91 05 01 	lds	r30, 0x0105
    182c:	f0 91 06 01 	lds	r31, 0x0106
    1830:	09 95       	icall
	           }
	 }	  
	if(GPT_pfunTIMER0_2 != NULL)
    1832:	80 91 03 01 	lds	r24, 0x0103
    1836:	90 91 04 01 	lds	r25, 0x0104
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	a1 f0       	breq	.+40     	; 0x1866 <__vector_10+0xf2>
 	 {
		 	 if(Loc_u16TickTime2 ==Channel_0_TickTime2 )
    183e:	20 91 2c 01 	lds	r18, 0x012C
    1842:	30 91 2d 01 	lds	r19, 0x012D
    1846:	80 91 22 01 	lds	r24, 0x0122
    184a:	90 91 23 01 	lds	r25, 0x0123
    184e:	28 17       	cp	r18, r24
    1850:	39 07       	cpc	r19, r25
    1852:	49 f4       	brne	.+18     	; 0x1866 <__vector_10+0xf2>
		 	 {
			 	 Loc_u16TickTime2=0;
    1854:	10 92 2d 01 	sts	0x012D, r1
    1858:	10 92 2c 01 	sts	0x012C, r1
			 	 GPT_pfunTIMER0_2();
    185c:	e0 91 03 01 	lds	r30, 0x0103
    1860:	f0 91 04 01 	lds	r31, 0x0104
    1864:	09 95       	icall
		 	 }
	 }
}
    1866:	ff 91       	pop	r31
    1868:	ef 91       	pop	r30
    186a:	bf 91       	pop	r27
    186c:	af 91       	pop	r26
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	7f 91       	pop	r23
    1874:	6f 91       	pop	r22
    1876:	5f 91       	pop	r21
    1878:	4f 91       	pop	r20
    187a:	3f 91       	pop	r19
    187c:	2f 91       	pop	r18
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <__vector_7>:

// ISR for Timer 1 COMPA //
void __vector_7(void)     __attribute__((signal,used));
void __vector_7(void)    // if Prescaler = 1024 and desired time = 10 ms so OCR0 has to be 77
{
    1888:	1f 92       	push	r1
    188a:	0f 92       	push	r0
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	0f 92       	push	r0
    1890:	11 24       	eor	r1, r1
    1892:	2f 93       	push	r18
    1894:	3f 93       	push	r19
    1896:	4f 93       	push	r20
    1898:	5f 93       	push	r21
    189a:	6f 93       	push	r22
    189c:	7f 93       	push	r23
    189e:	8f 93       	push	r24
    18a0:	9f 93       	push	r25
    18a2:	af 93       	push	r26
    18a4:	bf 93       	push	r27
    18a6:	ef 93       	push	r30
    18a8:	ff 93       	push	r31
	static u16 Loc_u16TickTime=0;
	Loc_u16TickTime++;
    18aa:	80 91 2e 01 	lds	r24, 0x012E
    18ae:	90 91 2f 01 	lds	r25, 0x012F
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	90 93 2f 01 	sts	0x012F, r25
    18b8:	80 93 2e 01 	sts	0x012E, r24
	
   if(GPT_strISR.GPT_pfunTIMER1_OC1A != NULL)
    18bc:	20 91 40 01 	lds	r18, 0x0140
    18c0:	30 91 41 01 	lds	r19, 0x0141
    18c4:	21 15       	cp	r18, r1
    18c6:	31 05       	cpc	r19, r1
    18c8:	81 f0       	breq	.+32     	; 0x18ea <__vector_7+0x62>
    {
	 	if(Loc_u16TickTime == Timer_TickTime.Channel_1_TickTime_OC1A)
    18ca:	20 91 13 01 	lds	r18, 0x0113
    18ce:	30 91 14 01 	lds	r19, 0x0114
    18d2:	82 17       	cp	r24, r18
    18d4:	93 07       	cpc	r25, r19
    18d6:	49 f4       	brne	.+18     	; 0x18ea <__vector_7+0x62>
     	{
		     Loc_u16TickTime = 0;	 
    18d8:	10 92 2f 01 	sts	0x012F, r1
    18dc:	10 92 2e 01 	sts	0x012E, r1
	     	 GPT_strISR.GPT_pfunTIMER1_OC1A();
    18e0:	e0 91 40 01 	lds	r30, 0x0140
    18e4:	f0 91 41 01 	lds	r31, 0x0141
    18e8:	09 95       	icall
	    }
    }	
}
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	0f 90       	pop	r0
    1908:	1f 90       	pop	r1
    190a:	18 95       	reti

0000190c <__vector_8>:

// ISR for Timer 1 COMPB //
void __vector_8(void)     __attribute__((signal,used));
void __vector_8(void)    // if Prescaler = 1024 and desired time = 10 ms so OCR0 has to be 77
{
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
	static u16 Loc_u16TickTime=0;
	Loc_u16TickTime++;
    192e:	80 91 30 01 	lds	r24, 0x0130
    1932:	90 91 31 01 	lds	r25, 0x0131
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	90 93 31 01 	sts	0x0131, r25
    193c:	80 93 30 01 	sts	0x0130, r24
	
	if(Loc_u16TickTime == Timer_TickTime.Channel_1_TickTime_OC1B)
    1940:	20 91 15 01 	lds	r18, 0x0115
    1944:	30 91 16 01 	lds	r19, 0x0116
    1948:	82 17       	cp	r24, r18
    194a:	93 07       	cpc	r25, r19
    194c:	49 f4       	brne	.+18     	; 0x1960 <__vector_8+0x54>
	{
		Loc_u16TickTime = 0;
    194e:	10 92 31 01 	sts	0x0131, r1
    1952:	10 92 30 01 	sts	0x0130, r1
		GPT_strISR.GPT_pfunTIMER1_OC1B();
    1956:	e0 91 42 01 	lds	r30, 0x0142
    195a:	f0 91 43 01 	lds	r31, 0x0143
    195e:	09 95       	icall
	}
}
    1960:	ff 91       	pop	r31
    1962:	ef 91       	pop	r30
    1964:	bf 91       	pop	r27
    1966:	af 91       	pop	r26
    1968:	9f 91       	pop	r25
    196a:	8f 91       	pop	r24
    196c:	7f 91       	pop	r23
    196e:	6f 91       	pop	r22
    1970:	5f 91       	pop	r21
    1972:	4f 91       	pop	r20
    1974:	3f 91       	pop	r19
    1976:	2f 91       	pop	r18
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <__vector_4>:

// ISR for Timer 2 COMP //
void __vector_4(void)     __attribute__((signal,used));
void __vector_4(void)    // if Prescaler = 1024 and desired time = 10 ms so OCR0 has to be 77
{
    1982:	1f 92       	push	r1
    1984:	0f 92       	push	r0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	0f 92       	push	r0
    198a:	11 24       	eor	r1, r1
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
		static u16 Loc_u16TickTime=0;
		static u16 Loc_u16TickTime1=0;
		static u16 Loc_u16TickTime2=0;
		Loc_u16TickTime++;
    19a4:	80 91 32 01 	lds	r24, 0x0132
    19a8:	90 91 33 01 	lds	r25, 0x0133
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	90 93 33 01 	sts	0x0133, r25
    19b2:	80 93 32 01 	sts	0x0132, r24
		Loc_u16TickTime1++;
    19b6:	20 91 34 01 	lds	r18, 0x0134
    19ba:	30 91 35 01 	lds	r19, 0x0135
    19be:	2f 5f       	subi	r18, 0xFF	; 255
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	30 93 35 01 	sts	0x0135, r19
    19c6:	20 93 34 01 	sts	0x0134, r18
		Loc_u16TickTime2++;
    19ca:	20 91 36 01 	lds	r18, 0x0136
    19ce:	30 91 37 01 	lds	r19, 0x0137
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	30 93 37 01 	sts	0x0137, r19
    19da:	20 93 36 01 	sts	0x0136, r18
   if(GPT_strISR.GPT_pfunTIMER2 != NULL)
    19de:	20 91 44 01 	lds	r18, 0x0144
    19e2:	30 91 45 01 	lds	r19, 0x0145
    19e6:	21 15       	cp	r18, r1
    19e8:	31 05       	cpc	r19, r1
    19ea:	81 f0       	breq	.+32     	; 0x1a0c <__vector_4+0x8a>
    {
	  	  if(Loc_u16TickTime == Timer_TickTime.Channel_2_TickTime)
    19ec:	20 91 17 01 	lds	r18, 0x0117
    19f0:	30 91 18 01 	lds	r19, 0x0118
    19f4:	82 17       	cp	r24, r18
    19f6:	93 07       	cpc	r25, r19
    19f8:	49 f4       	brne	.+18     	; 0x1a0c <__vector_4+0x8a>
          {
		      Loc_u16TickTime = 0;
    19fa:	10 92 33 01 	sts	0x0133, r1
    19fe:	10 92 32 01 	sts	0x0132, r1
		     GPT_strISR.GPT_pfunTIMER2();
    1a02:	e0 91 44 01 	lds	r30, 0x0144
    1a06:	f0 91 45 01 	lds	r31, 0x0145
    1a0a:	09 95       	icall
	      }
   }	
	
	  if(GPT_pfunTIMER2_1 != NULL)
    1a0c:	80 91 01 01 	lds	r24, 0x0101
    1a10:	90 91 02 01 	lds	r25, 0x0102
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	a1 f0       	breq	.+40     	; 0x1a40 <__vector_4+0xbe>
      {
    	    if(Loc_u16TickTime1 == Channel_2_TickTime1)
    1a18:	20 91 34 01 	lds	r18, 0x0134
    1a1c:	30 91 35 01 	lds	r19, 0x0135
    1a20:	80 91 24 01 	lds	r24, 0x0124
    1a24:	90 91 25 01 	lds	r25, 0x0125
    1a28:	28 17       	cp	r18, r24
    1a2a:	39 07       	cpc	r19, r25
    1a2c:	49 f4       	brne	.+18     	; 0x1a40 <__vector_4+0xbe>
    	     {
    		    Loc_u16TickTime1 = 0;
    1a2e:	10 92 35 01 	sts	0x0135, r1
    1a32:	10 92 34 01 	sts	0x0134, r1
    		    GPT_pfunTIMER2_1();
    1a36:	e0 91 01 01 	lds	r30, 0x0101
    1a3a:	f0 91 02 01 	lds	r31, 0x0102
    1a3e:	09 95       	icall
    	    }
      }
     if(GPT_pfunTIMER2_2 != NULL)
    1a40:	80 91 ff 00 	lds	r24, 0x00FF
    1a44:	90 91 00 01 	lds	r25, 0x0100
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	a1 f0       	breq	.+40     	; 0x1a74 <__vector_4+0xf2>
     {
	       if(Loc_u16TickTime2 == Channel_2_TickTime2)
    1a4c:	20 91 36 01 	lds	r18, 0x0136
    1a50:	30 91 37 01 	lds	r19, 0x0137
    1a54:	80 91 26 01 	lds	r24, 0x0126
    1a58:	90 91 27 01 	lds	r25, 0x0127
    1a5c:	28 17       	cp	r18, r24
    1a5e:	39 07       	cpc	r19, r25
    1a60:	49 f4       	brne	.+18     	; 0x1a74 <__vector_4+0xf2>
	       {
		      Loc_u16TickTime2 = 0;
    1a62:	10 92 37 01 	sts	0x0137, r1
    1a66:	10 92 36 01 	sts	0x0136, r1
		      GPT_pfunTIMER2_2();
    1a6a:	e0 91 ff 00 	lds	r30, 0x00FF
    1a6e:	f0 91 00 01 	lds	r31, 0x0100
    1a72:	09 95       	icall
	       }
    } 
	
}
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_11>:

//*********************************************************************************************** OVER FLOW ISR *******************************************************************************************
// ISR for Timer 0 OVF //
void __vector_11(void)     __attribute__((signal,used));
void __vector_11(void)
{
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
  static u16 Loc_u16TickTime=0;
  Loc_u16TickTime++;
    1ab8:	80 91 38 01 	lds	r24, 0x0138
    1abc:	90 91 39 01 	lds	r25, 0x0139
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	90 93 39 01 	sts	0x0139, r25
    1ac6:	80 93 38 01 	sts	0x0138, r24
  
  if(GPT_strISR.GPT_pfunTIMER0 != NULL)
    1aca:	20 91 3e 01 	lds	r18, 0x013E
    1ace:	30 91 3f 01 	lds	r19, 0x013F
    1ad2:	21 15       	cp	r18, r1
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	99 f0       	breq	.+38     	; 0x1afe <__vector_11+0x68>
  {
	  if(Loc_u16TickTime == Global_u16TIMER0_OVFCounter)
    1ad8:	20 91 0e 01 	lds	r18, 0x010E
    1adc:	30 91 0f 01 	lds	r19, 0x010F
    1ae0:	82 17       	cp	r24, r18
    1ae2:	93 07       	cpc	r25, r19
    1ae4:	61 f4       	brne	.+24     	; 0x1afe <__vector_11+0x68>
	  {
		  Loc_u16TickTime = 0;
    1ae6:	10 92 39 01 	sts	0x0139, r1
    1aea:	10 92 38 01 	sts	0x0138, r1
		   GPT_u8_TCNT0_REG = Global_u8TIMER0_OVFPreload;
    1aee:	80 91 10 01 	lds	r24, 0x0110
    1af2:	82 bf       	out	0x32, r24	; 50
		   GPT_strISR.GPT_pfunTIMER0();
    1af4:	e0 91 3e 01 	lds	r30, 0x013E
    1af8:	f0 91 3f 01 	lds	r31, 0x013F
    1afc:	09 95       	icall
		 
	  }
  }
}
    1afe:	ff 91       	pop	r31
    1b00:	ef 91       	pop	r30
    1b02:	bf 91       	pop	r27
    1b04:	af 91       	pop	r26
    1b06:	9f 91       	pop	r25
    1b08:	8f 91       	pop	r24
    1b0a:	7f 91       	pop	r23
    1b0c:	6f 91       	pop	r22
    1b0e:	5f 91       	pop	r21
    1b10:	4f 91       	pop	r20
    1b12:	3f 91       	pop	r19
    1b14:	2f 91       	pop	r18
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	0f 90       	pop	r0
    1b1c:	1f 90       	pop	r1
    1b1e:	18 95       	reti

00001b20 <__vector_9>:

//ISR for Timer 1 OVF //
void __vector_9(void)     __attribute__((signal,used));
void __vector_9(void)
{
    1b20:	1f 92       	push	r1
    1b22:	0f 92       	push	r0
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	0f 92       	push	r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
	static u16 Loc_u16TickTime=0;
	Loc_u16TickTime++;
    1b42:	80 91 3a 01 	lds	r24, 0x013A
    1b46:	90 91 3b 01 	lds	r25, 0x013B
    1b4a:	01 96       	adiw	r24, 0x01	; 1
    1b4c:	90 93 3b 01 	sts	0x013B, r25
    1b50:	80 93 3a 01 	sts	0x013A, r24
	
	if(GPT_strISR.GPT_pfunTIMER1_OC1A != NULL)
    1b54:	20 91 40 01 	lds	r18, 0x0140
    1b58:	30 91 41 01 	lds	r19, 0x0141
    1b5c:	21 15       	cp	r18, r1
    1b5e:	31 05       	cpc	r19, r1
    1b60:	b1 f0       	breq	.+44     	; 0x1b8e <__vector_9+0x6e>
	{
		if(Loc_u16TickTime == Global_u16TIMER1_OVFCounter)
    1b62:	20 91 19 01 	lds	r18, 0x0119
    1b66:	30 91 1a 01 	lds	r19, 0x011A
    1b6a:	82 17       	cp	r24, r18
    1b6c:	93 07       	cpc	r25, r19
    1b6e:	79 f4       	brne	.+30     	; 0x1b8e <__vector_9+0x6e>
		{
			Loc_u16TickTime = 0;
    1b70:	10 92 3b 01 	sts	0x013B, r1
    1b74:	10 92 3a 01 	sts	0x013A, r1
			GPT_u16_TCNT1L = Global_u16TIMER1_OVFPreload;
    1b78:	80 91 1b 01 	lds	r24, 0x011B
    1b7c:	90 91 1c 01 	lds	r25, 0x011C
    1b80:	9d bd       	out	0x2d, r25	; 45
    1b82:	8c bd       	out	0x2c, r24	; 44
			GPT_strISR.GPT_pfunTIMER1_OC1A();
    1b84:	e0 91 40 01 	lds	r30, 0x0140
    1b88:	f0 91 41 01 	lds	r31, 0x0141
    1b8c:	09 95       	icall
		}
	}
}
    1b8e:	ff 91       	pop	r31
    1b90:	ef 91       	pop	r30
    1b92:	bf 91       	pop	r27
    1b94:	af 91       	pop	r26
    1b96:	9f 91       	pop	r25
    1b98:	8f 91       	pop	r24
    1b9a:	7f 91       	pop	r23
    1b9c:	6f 91       	pop	r22
    1b9e:	5f 91       	pop	r21
    1ba0:	4f 91       	pop	r20
    1ba2:	3f 91       	pop	r19
    1ba4:	2f 91       	pop	r18
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <__vector_5>:

// ISR for Timer 2 OVF //
void __vector_5(void)     __attribute__((signal,used));
void __vector_5(void)
{
    1bb0:	1f 92       	push	r1
    1bb2:	0f 92       	push	r0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	0f 92       	push	r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
	static u16 Loc_u16TickTime=0;
	Loc_u16TickTime++;
    1bd2:	80 91 3c 01 	lds	r24, 0x013C
    1bd6:	90 91 3d 01 	lds	r25, 0x013D
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	90 93 3d 01 	sts	0x013D, r25
    1be0:	80 93 3c 01 	sts	0x013C, r24
	
	if(GPT_strISR.GPT_pfunTIMER2 != NULL)
    1be4:	20 91 44 01 	lds	r18, 0x0144
    1be8:	30 91 45 01 	lds	r19, 0x0145
    1bec:	21 15       	cp	r18, r1
    1bee:	31 05       	cpc	r19, r1
    1bf0:	99 f0       	breq	.+38     	; 0x1c18 <__vector_5+0x68>
	{
		if(Loc_u16TickTime == Global_u16TIMER2_OVFCounter)
    1bf2:	20 91 1d 01 	lds	r18, 0x011D
    1bf6:	30 91 1e 01 	lds	r19, 0x011E
    1bfa:	82 17       	cp	r24, r18
    1bfc:	93 07       	cpc	r25, r19
    1bfe:	61 f4       	brne	.+24     	; 0x1c18 <__vector_5+0x68>
		{
			Loc_u16TickTime = 0;
    1c00:	10 92 3d 01 	sts	0x013D, r1
    1c04:	10 92 3c 01 	sts	0x013C, r1
			GPT_u8_TCNT2_REG = Global_u8TIMER2_OVFPreload;
    1c08:	80 91 1f 01 	lds	r24, 0x011F
    1c0c:	84 bd       	out	0x24, r24	; 36
			GPT_strISR.GPT_pfunTIMER2();
    1c0e:	e0 91 44 01 	lds	r30, 0x0144
    1c12:	f0 91 45 01 	lds	r31, 0x0145
    1c16:	09 95       	icall
		}
	}
}
    1c18:	ff 91       	pop	r31
    1c1a:	ef 91       	pop	r30
    1c1c:	bf 91       	pop	r27
    1c1e:	af 91       	pop	r26
    1c20:	9f 91       	pop	r25
    1c22:	8f 91       	pop	r24
    1c24:	7f 91       	pop	r23
    1c26:	6f 91       	pop	r22
    1c28:	5f 91       	pop	r21
    1c2a:	4f 91       	pop	r20
    1c2c:	3f 91       	pop	r19
    1c2e:	2f 91       	pop	r18
    1c30:	0f 90       	pop	r0
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	0f 90       	pop	r0
    1c36:	1f 90       	pop	r1
    1c38:	18 95       	reti

00001c3a <__subsf3>:
    1c3a:	50 58       	subi	r21, 0x80	; 128

00001c3c <__addsf3>:
    1c3c:	bb 27       	eor	r27, r27
    1c3e:	aa 27       	eor	r26, r26
    1c40:	0e d0       	rcall	.+28     	; 0x1c5e <__addsf3x>
    1c42:	48 c1       	rjmp	.+656    	; 0x1ed4 <__fp_round>
    1c44:	39 d1       	rcall	.+626    	; 0x1eb8 <__fp_pscA>
    1c46:	30 f0       	brcs	.+12     	; 0x1c54 <__addsf3+0x18>
    1c48:	3e d1       	rcall	.+636    	; 0x1ec6 <__fp_pscB>
    1c4a:	20 f0       	brcs	.+8      	; 0x1c54 <__addsf3+0x18>
    1c4c:	31 f4       	brne	.+12     	; 0x1c5a <__addsf3+0x1e>
    1c4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c50:	11 f4       	brne	.+4      	; 0x1c56 <__addsf3+0x1a>
    1c52:	1e f4       	brtc	.+6      	; 0x1c5a <__addsf3+0x1e>
    1c54:	2e c1       	rjmp	.+604    	; 0x1eb2 <__fp_nan>
    1c56:	0e f4       	brtc	.+2      	; 0x1c5a <__addsf3+0x1e>
    1c58:	e0 95       	com	r30
    1c5a:	e7 fb       	bst	r30, 7
    1c5c:	24 c1       	rjmp	.+584    	; 0x1ea6 <__fp_inf>

00001c5e <__addsf3x>:
    1c5e:	e9 2f       	mov	r30, r25
    1c60:	4a d1       	rcall	.+660    	; 0x1ef6 <__fp_split3>
    1c62:	80 f3       	brcs	.-32     	; 0x1c44 <__addsf3+0x8>
    1c64:	ba 17       	cp	r27, r26
    1c66:	62 07       	cpc	r22, r18
    1c68:	73 07       	cpc	r23, r19
    1c6a:	84 07       	cpc	r24, r20
    1c6c:	95 07       	cpc	r25, r21
    1c6e:	18 f0       	brcs	.+6      	; 0x1c76 <__addsf3x+0x18>
    1c70:	71 f4       	brne	.+28     	; 0x1c8e <__addsf3x+0x30>
    1c72:	9e f5       	brtc	.+102    	; 0x1cda <__addsf3x+0x7c>
    1c74:	62 c1       	rjmp	.+708    	; 0x1f3a <__fp_zero>
    1c76:	0e f4       	brtc	.+2      	; 0x1c7a <__addsf3x+0x1c>
    1c78:	e0 95       	com	r30
    1c7a:	0b 2e       	mov	r0, r27
    1c7c:	ba 2f       	mov	r27, r26
    1c7e:	a0 2d       	mov	r26, r0
    1c80:	0b 01       	movw	r0, r22
    1c82:	b9 01       	movw	r22, r18
    1c84:	90 01       	movw	r18, r0
    1c86:	0c 01       	movw	r0, r24
    1c88:	ca 01       	movw	r24, r20
    1c8a:	a0 01       	movw	r20, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	ff 27       	eor	r31, r31
    1c90:	59 1b       	sub	r21, r25
    1c92:	99 f0       	breq	.+38     	; 0x1cba <__addsf3x+0x5c>
    1c94:	59 3f       	cpi	r21, 0xF9	; 249
    1c96:	50 f4       	brcc	.+20     	; 0x1cac <__addsf3x+0x4e>
    1c98:	50 3e       	cpi	r21, 0xE0	; 224
    1c9a:	68 f1       	brcs	.+90     	; 0x1cf6 <__addsf3x+0x98>
    1c9c:	1a 16       	cp	r1, r26
    1c9e:	f0 40       	sbci	r31, 0x00	; 0
    1ca0:	a2 2f       	mov	r26, r18
    1ca2:	23 2f       	mov	r18, r19
    1ca4:	34 2f       	mov	r19, r20
    1ca6:	44 27       	eor	r20, r20
    1ca8:	58 5f       	subi	r21, 0xF8	; 248
    1caa:	f3 cf       	rjmp	.-26     	; 0x1c92 <__addsf3x+0x34>
    1cac:	46 95       	lsr	r20
    1cae:	37 95       	ror	r19
    1cb0:	27 95       	ror	r18
    1cb2:	a7 95       	ror	r26
    1cb4:	f0 40       	sbci	r31, 0x00	; 0
    1cb6:	53 95       	inc	r21
    1cb8:	c9 f7       	brne	.-14     	; 0x1cac <__addsf3x+0x4e>
    1cba:	7e f4       	brtc	.+30     	; 0x1cda <__addsf3x+0x7c>
    1cbc:	1f 16       	cp	r1, r31
    1cbe:	ba 0b       	sbc	r27, r26
    1cc0:	62 0b       	sbc	r22, r18
    1cc2:	73 0b       	sbc	r23, r19
    1cc4:	84 0b       	sbc	r24, r20
    1cc6:	ba f0       	brmi	.+46     	; 0x1cf6 <__addsf3x+0x98>
    1cc8:	91 50       	subi	r25, 0x01	; 1
    1cca:	a1 f0       	breq	.+40     	; 0x1cf4 <__addsf3x+0x96>
    1ccc:	ff 0f       	add	r31, r31
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	66 1f       	adc	r22, r22
    1cd2:	77 1f       	adc	r23, r23
    1cd4:	88 1f       	adc	r24, r24
    1cd6:	c2 f7       	brpl	.-16     	; 0x1cc8 <__addsf3x+0x6a>
    1cd8:	0e c0       	rjmp	.+28     	; 0x1cf6 <__addsf3x+0x98>
    1cda:	ba 0f       	add	r27, r26
    1cdc:	62 1f       	adc	r22, r18
    1cde:	73 1f       	adc	r23, r19
    1ce0:	84 1f       	adc	r24, r20
    1ce2:	48 f4       	brcc	.+18     	; 0x1cf6 <__addsf3x+0x98>
    1ce4:	87 95       	ror	r24
    1ce6:	77 95       	ror	r23
    1ce8:	67 95       	ror	r22
    1cea:	b7 95       	ror	r27
    1cec:	f7 95       	ror	r31
    1cee:	9e 3f       	cpi	r25, 0xFE	; 254
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <__addsf3x+0x96>
    1cf2:	b3 cf       	rjmp	.-154    	; 0x1c5a <__addsf3+0x1e>
    1cf4:	93 95       	inc	r25
    1cf6:	88 0f       	add	r24, r24
    1cf8:	08 f0       	brcs	.+2      	; 0x1cfc <__addsf3x+0x9e>
    1cfa:	99 27       	eor	r25, r25
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	97 95       	ror	r25
    1d00:	87 95       	ror	r24
    1d02:	08 95       	ret

00001d04 <__divsf3>:
    1d04:	0c d0       	rcall	.+24     	; 0x1d1e <__divsf3x>
    1d06:	e6 c0       	rjmp	.+460    	; 0x1ed4 <__fp_round>
    1d08:	de d0       	rcall	.+444    	; 0x1ec6 <__fp_pscB>
    1d0a:	40 f0       	brcs	.+16     	; 0x1d1c <__divsf3+0x18>
    1d0c:	d5 d0       	rcall	.+426    	; 0x1eb8 <__fp_pscA>
    1d0e:	30 f0       	brcs	.+12     	; 0x1d1c <__divsf3+0x18>
    1d10:	21 f4       	brne	.+8      	; 0x1d1a <__divsf3+0x16>
    1d12:	5f 3f       	cpi	r21, 0xFF	; 255
    1d14:	19 f0       	breq	.+6      	; 0x1d1c <__divsf3+0x18>
    1d16:	c7 c0       	rjmp	.+398    	; 0x1ea6 <__fp_inf>
    1d18:	51 11       	cpse	r21, r1
    1d1a:	10 c1       	rjmp	.+544    	; 0x1f3c <__fp_szero>
    1d1c:	ca c0       	rjmp	.+404    	; 0x1eb2 <__fp_nan>

00001d1e <__divsf3x>:
    1d1e:	eb d0       	rcall	.+470    	; 0x1ef6 <__fp_split3>
    1d20:	98 f3       	brcs	.-26     	; 0x1d08 <__divsf3+0x4>

00001d22 <__divsf3_pse>:
    1d22:	99 23       	and	r25, r25
    1d24:	c9 f3       	breq	.-14     	; 0x1d18 <__divsf3+0x14>
    1d26:	55 23       	and	r21, r21
    1d28:	b1 f3       	breq	.-20     	; 0x1d16 <__divsf3+0x12>
    1d2a:	95 1b       	sub	r25, r21
    1d2c:	55 0b       	sbc	r21, r21
    1d2e:	bb 27       	eor	r27, r27
    1d30:	aa 27       	eor	r26, r26
    1d32:	62 17       	cp	r22, r18
    1d34:	73 07       	cpc	r23, r19
    1d36:	84 07       	cpc	r24, r20
    1d38:	38 f0       	brcs	.+14     	; 0x1d48 <__divsf3_pse+0x26>
    1d3a:	9f 5f       	subi	r25, 0xFF	; 255
    1d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3e:	22 0f       	add	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	44 1f       	adc	r20, r20
    1d44:	aa 1f       	adc	r26, r26
    1d46:	a9 f3       	breq	.-22     	; 0x1d32 <__divsf3_pse+0x10>
    1d48:	33 d0       	rcall	.+102    	; 0x1db0 <__divsf3_pse+0x8e>
    1d4a:	0e 2e       	mov	r0, r30
    1d4c:	3a f0       	brmi	.+14     	; 0x1d5c <__divsf3_pse+0x3a>
    1d4e:	e0 e8       	ldi	r30, 0x80	; 128
    1d50:	30 d0       	rcall	.+96     	; 0x1db2 <__divsf3_pse+0x90>
    1d52:	91 50       	subi	r25, 0x01	; 1
    1d54:	50 40       	sbci	r21, 0x00	; 0
    1d56:	e6 95       	lsr	r30
    1d58:	00 1c       	adc	r0, r0
    1d5a:	ca f7       	brpl	.-14     	; 0x1d4e <__divsf3_pse+0x2c>
    1d5c:	29 d0       	rcall	.+82     	; 0x1db0 <__divsf3_pse+0x8e>
    1d5e:	fe 2f       	mov	r31, r30
    1d60:	27 d0       	rcall	.+78     	; 0x1db0 <__divsf3_pse+0x8e>
    1d62:	66 0f       	add	r22, r22
    1d64:	77 1f       	adc	r23, r23
    1d66:	88 1f       	adc	r24, r24
    1d68:	bb 1f       	adc	r27, r27
    1d6a:	26 17       	cp	r18, r22
    1d6c:	37 07       	cpc	r19, r23
    1d6e:	48 07       	cpc	r20, r24
    1d70:	ab 07       	cpc	r26, r27
    1d72:	b0 e8       	ldi	r27, 0x80	; 128
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <__divsf3_pse+0x56>
    1d76:	bb 0b       	sbc	r27, r27
    1d78:	80 2d       	mov	r24, r0
    1d7a:	bf 01       	movw	r22, r30
    1d7c:	ff 27       	eor	r31, r31
    1d7e:	93 58       	subi	r25, 0x83	; 131
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255
    1d82:	2a f0       	brmi	.+10     	; 0x1d8e <__divsf3_pse+0x6c>
    1d84:	9e 3f       	cpi	r25, 0xFE	; 254
    1d86:	51 05       	cpc	r21, r1
    1d88:	68 f0       	brcs	.+26     	; 0x1da4 <__divsf3_pse+0x82>
    1d8a:	8d c0       	rjmp	.+282    	; 0x1ea6 <__fp_inf>
    1d8c:	d7 c0       	rjmp	.+430    	; 0x1f3c <__fp_szero>
    1d8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d90:	ec f3       	brlt	.-6      	; 0x1d8c <__divsf3_pse+0x6a>
    1d92:	98 3e       	cpi	r25, 0xE8	; 232
    1d94:	dc f3       	brlt	.-10     	; 0x1d8c <__divsf3_pse+0x6a>
    1d96:	86 95       	lsr	r24
    1d98:	77 95       	ror	r23
    1d9a:	67 95       	ror	r22
    1d9c:	b7 95       	ror	r27
    1d9e:	f7 95       	ror	r31
    1da0:	9f 5f       	subi	r25, 0xFF	; 255
    1da2:	c9 f7       	brne	.-14     	; 0x1d96 <__divsf3_pse+0x74>
    1da4:	88 0f       	add	r24, r24
    1da6:	91 1d       	adc	r25, r1
    1da8:	96 95       	lsr	r25
    1daa:	87 95       	ror	r24
    1dac:	97 f9       	bld	r25, 7
    1dae:	08 95       	ret
    1db0:	e1 e0       	ldi	r30, 0x01	; 1
    1db2:	66 0f       	add	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	88 1f       	adc	r24, r24
    1db8:	bb 1f       	adc	r27, r27
    1dba:	62 17       	cp	r22, r18
    1dbc:	73 07       	cpc	r23, r19
    1dbe:	84 07       	cpc	r24, r20
    1dc0:	ba 07       	cpc	r27, r26
    1dc2:	20 f0       	brcs	.+8      	; 0x1dcc <__divsf3_pse+0xaa>
    1dc4:	62 1b       	sub	r22, r18
    1dc6:	73 0b       	sbc	r23, r19
    1dc8:	84 0b       	sbc	r24, r20
    1dca:	ba 0b       	sbc	r27, r26
    1dcc:	ee 1f       	adc	r30, r30
    1dce:	88 f7       	brcc	.-30     	; 0x1db2 <__divsf3_pse+0x90>
    1dd0:	e0 95       	com	r30
    1dd2:	08 95       	ret

00001dd4 <__fixunssfsi>:
    1dd4:	98 d0       	rcall	.+304    	; 0x1f06 <__fp_splitA>
    1dd6:	88 f0       	brcs	.+34     	; 0x1dfa <__fixunssfsi+0x26>
    1dd8:	9f 57       	subi	r25, 0x7F	; 127
    1dda:	90 f0       	brcs	.+36     	; 0x1e00 <__fixunssfsi+0x2c>
    1ddc:	b9 2f       	mov	r27, r25
    1dde:	99 27       	eor	r25, r25
    1de0:	b7 51       	subi	r27, 0x17	; 23
    1de2:	a0 f0       	brcs	.+40     	; 0x1e0c <__fixunssfsi+0x38>
    1de4:	d1 f0       	breq	.+52     	; 0x1e1a <__fixunssfsi+0x46>
    1de6:	66 0f       	add	r22, r22
    1de8:	77 1f       	adc	r23, r23
    1dea:	88 1f       	adc	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	1a f0       	brmi	.+6      	; 0x1df6 <__fixunssfsi+0x22>
    1df0:	ba 95       	dec	r27
    1df2:	c9 f7       	brne	.-14     	; 0x1de6 <__fixunssfsi+0x12>
    1df4:	12 c0       	rjmp	.+36     	; 0x1e1a <__fixunssfsi+0x46>
    1df6:	b1 30       	cpi	r27, 0x01	; 1
    1df8:	81 f0       	breq	.+32     	; 0x1e1a <__fixunssfsi+0x46>
    1dfa:	9f d0       	rcall	.+318    	; 0x1f3a <__fp_zero>
    1dfc:	b1 e0       	ldi	r27, 0x01	; 1
    1dfe:	08 95       	ret
    1e00:	9c c0       	rjmp	.+312    	; 0x1f3a <__fp_zero>
    1e02:	67 2f       	mov	r22, r23
    1e04:	78 2f       	mov	r23, r24
    1e06:	88 27       	eor	r24, r24
    1e08:	b8 5f       	subi	r27, 0xF8	; 248
    1e0a:	39 f0       	breq	.+14     	; 0x1e1a <__fixunssfsi+0x46>
    1e0c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e0e:	cc f3       	brlt	.-14     	; 0x1e02 <__fixunssfsi+0x2e>
    1e10:	86 95       	lsr	r24
    1e12:	77 95       	ror	r23
    1e14:	67 95       	ror	r22
    1e16:	b3 95       	inc	r27
    1e18:	d9 f7       	brne	.-10     	; 0x1e10 <__fixunssfsi+0x3c>
    1e1a:	3e f4       	brtc	.+14     	; 0x1e2a <__fixunssfsi+0x56>
    1e1c:	90 95       	com	r25
    1e1e:	80 95       	com	r24
    1e20:	70 95       	com	r23
    1e22:	61 95       	neg	r22
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	8f 4f       	sbci	r24, 0xFF	; 255
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	08 95       	ret

00001e2c <__floatunsisf>:
    1e2c:	e8 94       	clt
    1e2e:	09 c0       	rjmp	.+18     	; 0x1e42 <__floatsisf+0x12>

00001e30 <__floatsisf>:
    1e30:	97 fb       	bst	r25, 7
    1e32:	3e f4       	brtc	.+14     	; 0x1e42 <__floatsisf+0x12>
    1e34:	90 95       	com	r25
    1e36:	80 95       	com	r24
    1e38:	70 95       	com	r23
    1e3a:	61 95       	neg	r22
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	99 23       	and	r25, r25
    1e44:	a9 f0       	breq	.+42     	; 0x1e70 <__floatsisf+0x40>
    1e46:	f9 2f       	mov	r31, r25
    1e48:	96 e9       	ldi	r25, 0x96	; 150
    1e4a:	bb 27       	eor	r27, r27
    1e4c:	93 95       	inc	r25
    1e4e:	f6 95       	lsr	r31
    1e50:	87 95       	ror	r24
    1e52:	77 95       	ror	r23
    1e54:	67 95       	ror	r22
    1e56:	b7 95       	ror	r27
    1e58:	f1 11       	cpse	r31, r1
    1e5a:	f8 cf       	rjmp	.-16     	; 0x1e4c <__floatsisf+0x1c>
    1e5c:	fa f4       	brpl	.+62     	; 0x1e9c <__floatsisf+0x6c>
    1e5e:	bb 0f       	add	r27, r27
    1e60:	11 f4       	brne	.+4      	; 0x1e66 <__floatsisf+0x36>
    1e62:	60 ff       	sbrs	r22, 0
    1e64:	1b c0       	rjmp	.+54     	; 0x1e9c <__floatsisf+0x6c>
    1e66:	6f 5f       	subi	r22, 0xFF	; 255
    1e68:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	16 c0       	rjmp	.+44     	; 0x1e9c <__floatsisf+0x6c>
    1e70:	88 23       	and	r24, r24
    1e72:	11 f0       	breq	.+4      	; 0x1e78 <__floatsisf+0x48>
    1e74:	96 e9       	ldi	r25, 0x96	; 150
    1e76:	11 c0       	rjmp	.+34     	; 0x1e9a <__floatsisf+0x6a>
    1e78:	77 23       	and	r23, r23
    1e7a:	21 f0       	breq	.+8      	; 0x1e84 <__floatsisf+0x54>
    1e7c:	9e e8       	ldi	r25, 0x8E	; 142
    1e7e:	87 2f       	mov	r24, r23
    1e80:	76 2f       	mov	r23, r22
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <__floatsisf+0x5e>
    1e84:	66 23       	and	r22, r22
    1e86:	71 f0       	breq	.+28     	; 0x1ea4 <__floatsisf+0x74>
    1e88:	96 e8       	ldi	r25, 0x86	; 134
    1e8a:	86 2f       	mov	r24, r22
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	2a f0       	brmi	.+10     	; 0x1e9c <__floatsisf+0x6c>
    1e92:	9a 95       	dec	r25
    1e94:	66 0f       	add	r22, r22
    1e96:	77 1f       	adc	r23, r23
    1e98:	88 1f       	adc	r24, r24
    1e9a:	da f7       	brpl	.-10     	; 0x1e92 <__floatsisf+0x62>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	96 95       	lsr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	97 f9       	bld	r25, 7
    1ea4:	08 95       	ret

00001ea6 <__fp_inf>:
    1ea6:	97 f9       	bld	r25, 7
    1ea8:	9f 67       	ori	r25, 0x7F	; 127
    1eaa:	80 e8       	ldi	r24, 0x80	; 128
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	08 95       	ret

00001eb2 <__fp_nan>:
    1eb2:	9f ef       	ldi	r25, 0xFF	; 255
    1eb4:	80 ec       	ldi	r24, 0xC0	; 192
    1eb6:	08 95       	ret

00001eb8 <__fp_pscA>:
    1eb8:	00 24       	eor	r0, r0
    1eba:	0a 94       	dec	r0
    1ebc:	16 16       	cp	r1, r22
    1ebe:	17 06       	cpc	r1, r23
    1ec0:	18 06       	cpc	r1, r24
    1ec2:	09 06       	cpc	r0, r25
    1ec4:	08 95       	ret

00001ec6 <__fp_pscB>:
    1ec6:	00 24       	eor	r0, r0
    1ec8:	0a 94       	dec	r0
    1eca:	12 16       	cp	r1, r18
    1ecc:	13 06       	cpc	r1, r19
    1ece:	14 06       	cpc	r1, r20
    1ed0:	05 06       	cpc	r0, r21
    1ed2:	08 95       	ret

00001ed4 <__fp_round>:
    1ed4:	09 2e       	mov	r0, r25
    1ed6:	03 94       	inc	r0
    1ed8:	00 0c       	add	r0, r0
    1eda:	11 f4       	brne	.+4      	; 0x1ee0 <__fp_round+0xc>
    1edc:	88 23       	and	r24, r24
    1ede:	52 f0       	brmi	.+20     	; 0x1ef4 <__fp_round+0x20>
    1ee0:	bb 0f       	add	r27, r27
    1ee2:	40 f4       	brcc	.+16     	; 0x1ef4 <__fp_round+0x20>
    1ee4:	bf 2b       	or	r27, r31
    1ee6:	11 f4       	brne	.+4      	; 0x1eec <__fp_round+0x18>
    1ee8:	60 ff       	sbrs	r22, 0
    1eea:	04 c0       	rjmp	.+8      	; 0x1ef4 <__fp_round+0x20>
    1eec:	6f 5f       	subi	r22, 0xFF	; 255
    1eee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	08 95       	ret

00001ef6 <__fp_split3>:
    1ef6:	57 fd       	sbrc	r21, 7
    1ef8:	90 58       	subi	r25, 0x80	; 128
    1efa:	44 0f       	add	r20, r20
    1efc:	55 1f       	adc	r21, r21
    1efe:	59 f0       	breq	.+22     	; 0x1f16 <__fp_splitA+0x10>
    1f00:	5f 3f       	cpi	r21, 0xFF	; 255
    1f02:	71 f0       	breq	.+28     	; 0x1f20 <__fp_splitA+0x1a>
    1f04:	47 95       	ror	r20

00001f06 <__fp_splitA>:
    1f06:	88 0f       	add	r24, r24
    1f08:	97 fb       	bst	r25, 7
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	61 f0       	breq	.+24     	; 0x1f26 <__fp_splitA+0x20>
    1f0e:	9f 3f       	cpi	r25, 0xFF	; 255
    1f10:	79 f0       	breq	.+30     	; 0x1f30 <__fp_splitA+0x2a>
    1f12:	87 95       	ror	r24
    1f14:	08 95       	ret
    1f16:	12 16       	cp	r1, r18
    1f18:	13 06       	cpc	r1, r19
    1f1a:	14 06       	cpc	r1, r20
    1f1c:	55 1f       	adc	r21, r21
    1f1e:	f2 cf       	rjmp	.-28     	; 0x1f04 <__fp_split3+0xe>
    1f20:	46 95       	lsr	r20
    1f22:	f1 df       	rcall	.-30     	; 0x1f06 <__fp_splitA>
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <__fp_splitA+0x30>
    1f26:	16 16       	cp	r1, r22
    1f28:	17 06       	cpc	r1, r23
    1f2a:	18 06       	cpc	r1, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	f1 cf       	rjmp	.-30     	; 0x1f12 <__fp_splitA+0xc>
    1f30:	86 95       	lsr	r24
    1f32:	71 05       	cpc	r23, r1
    1f34:	61 05       	cpc	r22, r1
    1f36:	08 94       	sec
    1f38:	08 95       	ret

00001f3a <__fp_zero>:
    1f3a:	e8 94       	clt

00001f3c <__fp_szero>:
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	66 27       	eor	r22, r22
    1f40:	77 27       	eor	r23, r23
    1f42:	cb 01       	movw	r24, r22
    1f44:	97 f9       	bld	r25, 7
    1f46:	08 95       	ret

00001f48 <__mulsf3>:
    1f48:	0b d0       	rcall	.+22     	; 0x1f60 <__mulsf3x>
    1f4a:	c4 cf       	rjmp	.-120    	; 0x1ed4 <__fp_round>
    1f4c:	b5 df       	rcall	.-150    	; 0x1eb8 <__fp_pscA>
    1f4e:	28 f0       	brcs	.+10     	; 0x1f5a <__mulsf3+0x12>
    1f50:	ba df       	rcall	.-140    	; 0x1ec6 <__fp_pscB>
    1f52:	18 f0       	brcs	.+6      	; 0x1f5a <__mulsf3+0x12>
    1f54:	95 23       	and	r25, r21
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <__mulsf3+0x12>
    1f58:	a6 cf       	rjmp	.-180    	; 0x1ea6 <__fp_inf>
    1f5a:	ab cf       	rjmp	.-170    	; 0x1eb2 <__fp_nan>
    1f5c:	11 24       	eor	r1, r1
    1f5e:	ee cf       	rjmp	.-36     	; 0x1f3c <__fp_szero>

00001f60 <__mulsf3x>:
    1f60:	ca df       	rcall	.-108    	; 0x1ef6 <__fp_split3>
    1f62:	a0 f3       	brcs	.-24     	; 0x1f4c <__mulsf3+0x4>

00001f64 <__mulsf3_pse>:
    1f64:	95 9f       	mul	r25, r21
    1f66:	d1 f3       	breq	.-12     	; 0x1f5c <__mulsf3+0x14>
    1f68:	95 0f       	add	r25, r21
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	55 1f       	adc	r21, r21
    1f6e:	62 9f       	mul	r22, r18
    1f70:	f0 01       	movw	r30, r0
    1f72:	72 9f       	mul	r23, r18
    1f74:	bb 27       	eor	r27, r27
    1f76:	f0 0d       	add	r31, r0
    1f78:	b1 1d       	adc	r27, r1
    1f7a:	63 9f       	mul	r22, r19
    1f7c:	aa 27       	eor	r26, r26
    1f7e:	f0 0d       	add	r31, r0
    1f80:	b1 1d       	adc	r27, r1
    1f82:	aa 1f       	adc	r26, r26
    1f84:	64 9f       	mul	r22, r20
    1f86:	66 27       	eor	r22, r22
    1f88:	b0 0d       	add	r27, r0
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	66 1f       	adc	r22, r22
    1f8e:	82 9f       	mul	r24, r18
    1f90:	22 27       	eor	r18, r18
    1f92:	b0 0d       	add	r27, r0
    1f94:	a1 1d       	adc	r26, r1
    1f96:	62 1f       	adc	r22, r18
    1f98:	73 9f       	mul	r23, r19
    1f9a:	b0 0d       	add	r27, r0
    1f9c:	a1 1d       	adc	r26, r1
    1f9e:	62 1f       	adc	r22, r18
    1fa0:	83 9f       	mul	r24, r19
    1fa2:	a0 0d       	add	r26, r0
    1fa4:	61 1d       	adc	r22, r1
    1fa6:	22 1f       	adc	r18, r18
    1fa8:	74 9f       	mul	r23, r20
    1faa:	33 27       	eor	r19, r19
    1fac:	a0 0d       	add	r26, r0
    1fae:	61 1d       	adc	r22, r1
    1fb0:	23 1f       	adc	r18, r19
    1fb2:	84 9f       	mul	r24, r20
    1fb4:	60 0d       	add	r22, r0
    1fb6:	21 1d       	adc	r18, r1
    1fb8:	82 2f       	mov	r24, r18
    1fba:	76 2f       	mov	r23, r22
    1fbc:	6a 2f       	mov	r22, r26
    1fbe:	11 24       	eor	r1, r1
    1fc0:	9f 57       	subi	r25, 0x7F	; 127
    1fc2:	50 40       	sbci	r21, 0x00	; 0
    1fc4:	8a f0       	brmi	.+34     	; 0x1fe8 <__mulsf3_pse+0x84>
    1fc6:	e1 f0       	breq	.+56     	; 0x2000 <__mulsf3_pse+0x9c>
    1fc8:	88 23       	and	r24, r24
    1fca:	4a f0       	brmi	.+18     	; 0x1fde <__mulsf3_pse+0x7a>
    1fcc:	ee 0f       	add	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	66 1f       	adc	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	91 50       	subi	r25, 0x01	; 1
    1fda:	50 40       	sbci	r21, 0x00	; 0
    1fdc:	a9 f7       	brne	.-22     	; 0x1fc8 <__mulsf3_pse+0x64>
    1fde:	9e 3f       	cpi	r25, 0xFE	; 254
    1fe0:	51 05       	cpc	r21, r1
    1fe2:	70 f0       	brcs	.+28     	; 0x2000 <__mulsf3_pse+0x9c>
    1fe4:	60 cf       	rjmp	.-320    	; 0x1ea6 <__fp_inf>
    1fe6:	aa cf       	rjmp	.-172    	; 0x1f3c <__fp_szero>
    1fe8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fea:	ec f3       	brlt	.-6      	; 0x1fe6 <__mulsf3_pse+0x82>
    1fec:	98 3e       	cpi	r25, 0xE8	; 232
    1fee:	dc f3       	brlt	.-10     	; 0x1fe6 <__mulsf3_pse+0x82>
    1ff0:	86 95       	lsr	r24
    1ff2:	77 95       	ror	r23
    1ff4:	67 95       	ror	r22
    1ff6:	b7 95       	ror	r27
    1ff8:	f7 95       	ror	r31
    1ffa:	e7 95       	ror	r30
    1ffc:	9f 5f       	subi	r25, 0xFF	; 255
    1ffe:	c1 f7       	brne	.-16     	; 0x1ff0 <__mulsf3_pse+0x8c>
    2000:	fe 2b       	or	r31, r30
    2002:	88 0f       	add	r24, r24
    2004:	91 1d       	adc	r25, r1
    2006:	96 95       	lsr	r25
    2008:	87 95       	ror	r24
    200a:	97 f9       	bld	r25, 7
    200c:	08 95       	ret

0000200e <__udivmodqi4>:
    200e:	99 1b       	sub	r25, r25
    2010:	79 e0       	ldi	r23, 0x09	; 9
    2012:	04 c0       	rjmp	.+8      	; 0x201c <__udivmodqi4_ep>

00002014 <__udivmodqi4_loop>:
    2014:	99 1f       	adc	r25, r25
    2016:	96 17       	cp	r25, r22
    2018:	08 f0       	brcs	.+2      	; 0x201c <__udivmodqi4_ep>
    201a:	96 1b       	sub	r25, r22

0000201c <__udivmodqi4_ep>:
    201c:	88 1f       	adc	r24, r24
    201e:	7a 95       	dec	r23
    2020:	c9 f7       	brne	.-14     	; 0x2014 <__udivmodqi4_loop>
    2022:	80 95       	com	r24
    2024:	08 95       	ret

00002026 <__udivmodsi4>:
    2026:	a1 e2       	ldi	r26, 0x21	; 33
    2028:	1a 2e       	mov	r1, r26
    202a:	aa 1b       	sub	r26, r26
    202c:	bb 1b       	sub	r27, r27
    202e:	fd 01       	movw	r30, r26
    2030:	0d c0       	rjmp	.+26     	; 0x204c <__udivmodsi4_ep>

00002032 <__udivmodsi4_loop>:
    2032:	aa 1f       	adc	r26, r26
    2034:	bb 1f       	adc	r27, r27
    2036:	ee 1f       	adc	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	a2 17       	cp	r26, r18
    203c:	b3 07       	cpc	r27, r19
    203e:	e4 07       	cpc	r30, r20
    2040:	f5 07       	cpc	r31, r21
    2042:	20 f0       	brcs	.+8      	; 0x204c <__udivmodsi4_ep>
    2044:	a2 1b       	sub	r26, r18
    2046:	b3 0b       	sbc	r27, r19
    2048:	e4 0b       	sbc	r30, r20
    204a:	f5 0b       	sbc	r31, r21

0000204c <__udivmodsi4_ep>:
    204c:	66 1f       	adc	r22, r22
    204e:	77 1f       	adc	r23, r23
    2050:	88 1f       	adc	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	1a 94       	dec	r1
    2056:	69 f7       	brne	.-38     	; 0x2032 <__udivmodsi4_loop>
    2058:	60 95       	com	r22
    205a:	70 95       	com	r23
    205c:	80 95       	com	r24
    205e:	90 95       	com	r25
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	bd 01       	movw	r22, r26
    2066:	cf 01       	movw	r24, r30
    2068:	08 95       	ret

0000206a <_exit>:
    206a:	f8 94       	cli

0000206c <__stop_program>:
    206c:	ff cf       	rjmp	.-2      	; 0x206c <__stop_program>
